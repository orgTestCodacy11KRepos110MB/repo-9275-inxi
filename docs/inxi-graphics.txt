================================================================================
INXI GRAPHICS + COMPOSITORS + DM
================================================================================
FILE:    inxi-graphics.txt
VERSION: 1.2
DATE:    2022-10-16

----------------------------------------
Docs:
See: 

----------------------------------------
Code:
See:

----------------------------------------
Comments:

================================================================================
Sections:

GRAPHICS FUNCTIONS
  CARD RAM
  ...
GRAPHICS DATA
  VENDOR DATA
   AMD
   Biren
   Intel
   Nvidia
  KMS/DRM/DRI
  WAYLAND DATA 
   EGL/GBM
   WLROOTS
   X SCREEN
  VESA DATA
   GOP/UGA/VBE
  COMPOSITOR DATA
   All Active Compositors (used for -G compositor item):
   Wayland/Xorg compositors:
   Wayland compositors:
   X compositors:
   Mir: 
   Compositing WM (used with desktops):
   COMPOSITOR ARRAY RULES
  WM/compositor version (out of date)
  DISPLAY MANAGER
  MONITORS:
   sub display_output()
    
================================================================================
GRAPHICS FUNCTIONS
--------------------------------------------------------------------------------

========================================
CARD RAM:
----------------------------------------

https://askubuntu.com/questions/46197/how-to-check-video-memory-size
https://askubuntu.com/questions/46197/how-to-check-video-memory-size/475405#475405

wrong about lspci video ram but:
https://www.cyberciti.biz/faq/howto-find-linux-vga-video-card-ram/

lspci  -v -s  $(lspci | grep VGA | cut -d" " -f 1) | grep " prefetchable"
grep -P -o -i "(?<=memory:).*(?=kbytes)" /var/log/Xorg.0.log

CARD ARM ID:
display-port-controller
https://ip.cadence.com/ipportfolio/ip-portfolio-overview/interface-ip/display-ip/hd-display-transmitter-controller

----------------------------------------

/usr/lib/xorg-server/Xorg.wrap: Only console users are allowed to run the X server
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=863891

========================================
x_drivers()
----------------------------------------

List of xorg drivers by name
https://www.x.org/wiki/Projects/Drivers/

========================================
x_display_data()
----------------------------------------

https://stackoverflow.com/questions/35168810/is-it-possible-to-obtain-a-monitor-description-using-xrandr
edid data from: xrandr --verbose then parse-edid to translate to text.

https://metacpan.org/pod/Parse::EDID

https://unix.stackexchange.com/questions/114359/how-to-get-edid-for-a-single-monitor
https://stackoverflow.com/questions/10500521/linux-retrieve-monitor-names

========================================
wayland_data()
----------------------------------------
https://stackoverflow.com/questions/46578951/list-screen-resolutions-using-wayland-weston
weston-info

https://bugs.freedesktop.org/show_bug.cgi?id=101750

https://github.com/swaywm/sway/wiki/Useful-add-ons-for-sway
also useful list of general wayland tools/programs.

https://github.com/swaywm/wlroots
moved to:
https://gitlab.freedesktop.org/wlroots/wlroots

https://github.com/swaywm/wlroots/wiki/Getting-started

worth looking into as base for many compositors

https://github.com/solarkraft/awesome-wlroots

----------------------------------------

See set_monitors() and main::get_pcie_data() section for /sys/class/drm based
data, that gives monitor mods, kernel monitor ids, monitors enabled/disabled,
connected/disconnected/unknown.

----------------------------------------

https://stackoverflow.com/questions/46578951/list-screen-resolutions-using-wayland-weston/49705537

The simplest way is to check the weston log which will give you all supported modes for each connector(VGA,LVDS and HDMI) below are the log which highlights these.

[09:23:40.144] Output VGA-1 (crtc 59) video modes:
           1024x768@60.0, preferred, current, 65.0 MHz
           1440x900@59.9, 88.8 MHz
           1366x768@59.8, 85.5 MHz
           1366x768@60.0, 72.0 MHz
           1360x768@60.0, 85.5 MHz
           1280x800@59.8, 83.5 MHz
           1280x800@59.9, 71.0 MHz
           1280x768@59.9, 79.5 MHz
           1280x768@60.0, 68.2 MHz
           1280x720@60.0, 74.2 MHz
           800x600@60.3, 40.0 MHz
           800x600@56.2, 36.0 MHz
           848x480@60.0, 33.8 MHz
           640x480@59.9, 25.2 MHz
[09:23:40.144] Output 'VGA-1' enabled with head(s) VGA-1
[09:23:40.145] Chosen EGL config details:
           RGBA bits: 8 8 8 0
           swap interval range: 1 - 1
[09:23:40.151] Output HDMI-A-2 (crtc 58) video modes:
           1920x1080@60.0, preferred, current, 138.8 MHz
           1920x1080@60.0, 148.5 MHz
           1920x1080@59.9, 148.4 MHz
           1920x1080@60.0, 74.2 MHz
           1920x1080@59.9, 74.2 MHz
           1920x1080@50.0, 148.5 MHz
           1920x1080@50.0, 74.2 MHz
           1920x1080@40.0, 92.5 MHz
           1280x720@60.0, 74.2 MHz
           1280x720@59.9, 74.2 MHz
           1280x720@50.0, 74.2 MHz
           720x576@50.0, 27.0 MHz
           720x480@60.0, 27.0 MHz
           720x480@59.9, 27.0 MHz
           640x480@60.0, 25.2 MHz
           640x480@59.9, 25.2 MHz
[09:23:40.152] Output 'HDMI-A-2' enabled with head(s) HDMI-A-2
[09:23:40.152] Chosen EGL config details:
           RGBA bits: 8 8 8 0
           swap interval range: 1 - 1
[09:23:40.155] Output LVDS-1 (crtc 56) video modes:
           1024x768@60.2, preferred, current, 65.0 MHz
[09:23:40.155] Output 'LVDS-1' enabled with head(s) LVDS-1

-----

If you want to list all the modes the compositor supports (might not be the same 
as your monitor), you can run weston-info

----------------------------------------
https://discourse.gnome.org/t/get-monitor-number-size-and-scale-with-gtk-and-wayland/2776

https://discourse.gnome.org/t/get-screen-resolution-scale-factor-and-width-and-height-in-mm-for-wayland/7448
----------------------------------------
https://fedoramagazine.org/how-to-setup-multiple-monitors-in-sway/

swaymsg -t get_outputs

========================================
map_ids()
----------------------------------------

https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/drivers/gpu/drm/drm_connector.c?h=v5.16.5#n85
static struct drm_conn_prop_enum_list drm_connector_enum_list[] = {
	{ DRM_MODE_CONNECTOR_Unknown, "Unknown" },
	{ DRM_MODE_CONNECTOR_VGA, "VGA" },
	{ DRM_MODE_CONNECTOR_DVII, "DVI-I" },
	{ DRM_MODE_CONNECTOR_DVID, "DVI-D" },
	{ DRM_MODE_CONNECTOR_DVIA, "DVI-A" },
	{ DRM_MODE_CONNECTOR_Composite, "Composite" },
	{ DRM_MODE_CONNECTOR_SVIDEO, "SVIDEO" },
	{ DRM_MODE_CONNECTOR_LVDS, "LVDS" },
	{ DRM_MODE_CONNECTOR_Component, "Component" },
	{ DRM_MODE_CONNECTOR_9PinDIN, "DIN" },
	{ DRM_MODE_CONNECTOR_DisplayPort, "DP" },
	{ DRM_MODE_CONNECTOR_HDMIA, "HDMI-A" },
	{ DRM_MODE_CONNECTOR_HDMIB, "HDMI-B" },
	{ DRM_MODE_CONNECTOR_TV, "TV" },
	{ DRM_MODE_CONNECTOR_eDP, "eDP" },
	{ DRM_MODE_CONNECTOR_VIRTUAL, "Virtual" },
	{ DRM_MODE_CONNECTOR_DSI, "DSI" },
	{ DRM_MODE_CONNECTOR_DPI, "DPI" },
	{ DRM_MODE_CONNECTOR_WRITEBACK, "Writeback" },
	{ DRM_MODE_CONNECTOR_SPI, "SPI" },
	{ DRM_MODE_CONNECTOR_USB, "USB" },
};

https://landley.net/kdocs/htmldocs/drm.html

https://gitlab.freedesktop.org/xorg/driver/xf86-video-amdgpu/-/blob/master/src/drmmode_display.c#L2629
This file shows where amdgpu changes the numbering of monitor id by -1.

if (mode->name)
		strncpy(kmode->name, mode->name, DRM_DISPLAY_MODE_LEN);
	kmode->name[DRM_DISPLAY_MODE_LEN - 1] = 0;

----------------------------------------
https://askubuntu.com/questions/1310482/how-to-map-which-external-monitor-is-seen-as-which-dvi-plug-for-displaylink-x

note: 

4 external monitors go into : a hub of 4 DisplayLink-branded external 
videocards. (HDMI to USB)

Let's call it a dock. The dock goes into my laptop through one USB(-C).

I already made a udev rule, that detects an identifying attribute of the dock, 
and runs my xrandr command when I hotplug it.

Here is the bash command:

#!/bin/sh
xrandr \
--output DP-1 --off \
--output DP-2 --off \
--output HDMI-1 --off \
--output HDMI-2 --off \
--output DVI-I-4-3 --mode 1920x1080 --pos 0x0 --rotate normal \
--output DVI-I-5-4 --mode 1920x1080 --pos 0x1080 --rotate normal \
--output DVI-I-2-1 --mode 1920x1080 --pos 1920x240 --rotate left \
--output DVI-I-3-2 --mode 1920x1080 --pos 3000x240 --rotate left \
--output eDP-1 --primary --mode 1920x1080 --pos 4080x1900 --rotate normal

The problem is that at each hotplug, the monitors/cards of the dock are loaded 
randomly by the kernel. In other word I can't predict what monitor will be the 
DVI-I-M-N used in the xrandr command.

========================================
set_monitor_position()
----------------------------------------

https://unix.stackexchange.com/questions/667482/understanding-the-output-of-xrandr-query

Terminology

Words like monitor, screen, display and so on are near-synonyms, but in a given 
technical context, they can have different meanings. Unfortunately, the same 
word can have a different meaning in different communities. In this answer, I'll 
use the word monitor to mean a physical object that displays images on a 
(generally) rectangular canvas, typically a computer monitor (or something 
similar such as a video projector).

As far as the X window system is concerned, a display is a logical entity to 
which applications can connect and on which they can display windows, receive 
input, and do a few other things. A display can have multiple monitors, or can 
be connected to a virtual “monitor” that is not a physical device, for example a 
network connection for remote displays.

A screen is an obsolete concept. It's the original way X managed multiple 
monitors: a display could have multiple screens, each representing one monitor. 
An application had to choose which screen to display a window on; a window could 
not span multiple screens and could not move between screens. Due to these 
limitations, the concept has been mostly abandoned, but the operating system 
still supports it and the terminology still comes up here and there. Nowadays, 
there's just one screen that can span multiple monitors.

An output is the term that Xrandr uses to mean a port on the computer onto which 
a monitor. A “connected” output is a port on which a monitor is present (or a 
port on which the presence of a monitor cannot be reliably determined). Question 
1: screen dimensions

The display (technically the screen, but as we saw above in the modern world a 
display has a single screen) is a rectangular canvas on which windows can be 
displayed. The dimensions of this canvas typically change when the monitor 
configuration changes: it's adjusted to be the smallest rectangle that all the 
monitors fit in.

The first line indicates the minimum possible, current and maximum possible 
dimensions of this canvas. Each monitor shows a rectangular part of the canvas, 
aligned with the axes.

The minimum and maximum dimensions are only relevant when the monitor 
configuration changes. Parts of the canvas that are not shown by any monitor are 
effectively invisible. For example, if you had a single, tiny 320x160 monitor, 
the canvas would have to be at least 320x160 and the bottom half of the canvas 
would be invisible.

On the line for each monitor, the numbers after (dis)connected indicate the 
dimensions and the position of the monitor. For example, if you had a second 
monitor of the same size to the right of HDMI-0, that monitor would show 
1920x1080+1920+0. If that second monitor was below HDMI-0, it would show 
1920x1080+0+1080.

Question 2: monitor transformations

A monitor normally shows the pixel (x=0,y=0) (relative to the monitor's origin) 
at the top left, the pixel (x=1,y=1) immediately to its right, etc. If your 
system supports it (and most modern ones do), the monitor can be instructed to 
show the output differently. This can be configured with xrandr --rotate … 
--reflect …. The words in parentheses indicate the possible transformations.

For example, left rotates the picture 90° clockwise, and right rotates the 
picture 90° anticlockwise. This is useful if you've rotated the monitor 
correspondingly, typically because your monitor is wider than it's tall 
(landscape) but you want a displayed area that's taller than it's wide 
(portrait) so you rotate it. For example, after xrandr --output HDMI-0 --rotate 
left, the corresponding line will change to

HDMI-0 connected primary 1920x1080+0+0 left (normal left inverted right x axis y axis) 521mm x 293mm

inverted shows the image rotated upside-down. x axis (the two words are a single 
thing) shows the image flipped upside-down. y axis shows the image flipped 
around a vertical axis (in case for some reason you want to look at your monitor 
in a mirror). You can combine a rotation and a reflection. You can even specify 
--rotate inverted --reflect xy which shows the image normally since the 
composition of two orthogonal flips and a 180° turn is the identity 
transformation. Enabling a single output

I wish to have a command line where xrandr is called so that all displays except 
for this HDMI-0 display are turned off.

xrandr --output VGA-0 --off --output LVDS --off --output HDMI-0 --auto

--auto is the strange way xrandr spells “on” (i.e. “active”). It's the opposite 
of --off.
--primary is not useful when there's a single active monitor.
--pos lets you specify the position of the monitor on the canvas. 0x0 is the 
default so you don't need to specify it. It's somewhat unusual to use --pos 
explicitly; most often you'd use one of --mirror, --right-of, --left-of, --above 
or --below to position monitors relative to each other.
--mode is not useful unless you want to pick a mode that's different from the 
default, or to switch back from a non-default mode. The default is usually the 
best choice.
--rotate is not useful unless you want to pick a non-default rotation, or to 
switch back from a non-default rotation. The default rotation is usually the 
right one unless you've rotated your monitor to be in a portrait format, in 
which case you need --rotate left or --rotate right.

----------------------------------------
set_monitors() and main::get_pcie_data()
----------------------------------------
If wanted, check into non core module Parse::EDID to get more edid data.

https://metacpan.org/pod/Parse::EDID

----------------------------------------
https://wiki.st.com/stm32mpu/wiki/DRM_KMS_overview

----------------------------------------
https://unix.stackexchange.com/questions/576707/how-to-monitor-amd-gpu-on-linux-server

For vram and other custom /sys values
https://dri.freedesktop.org/docs/drm/gpu/amdgpu.html

================================================================================
GRAPHICS DATA
--------------------------------------------------------------------------------

========================================
VENDOR DATA
----------------------------------------

----------------------------------------
AMD
----------------------------------------

AMD gpu id raw:
AMD GPU: https://github.com/GPUOpen-Tools/device_info/blob/master/DeviceInfo.cpp

https://www.techpowerup.com/gpu-specs/?mfgr=AMD

https://www.amd.com/en/support/kb/faq/gpu-55

https://medium.com/high-tech-accessible/an-overview-of-amds-gpu-architectures-884432a717a6

https://en.wikipedia.org/wiki/List_of_AMD_graphics_processing_units

https://en.wikichip.org/wiki/amd/microarchitectures/vega

https://help.ubuntu.com/community/RadeonDriver

https://help.ubuntu.com/community/AMDGPU-Driver

https://www.anandtech.com/show/16775/amd-moves-gcn-1-2-3based-gpus-and-apus-to-legacy-also-drops-win7-support


data: lists/amd_products

http://pci-ids.ucw.cz/

https://www.techpowerup.com/gpu-specs/ati-mach64.g604
ATI GPU Architecture History
1986-1992 Wonder
1992-1997 Mach
1996 Rage 2
1997-1999 Rage 3
1998-1999 Rage 4
1999-2001 IBM
2000-2007 Rage 6
2000 Rage 5
2001-2006 Rage 7
2002-2007 Rage 8
2003-2008 Rage 9
2004-2008 R400
2005-2007 R500
2005-2013 TeraScale
2009-2015 TeraScale 2

https://www.techpowerup.com/gpu-specs/amd-arcturus.g927
AMD GPU Architecture History
2005-2007 R500
2005-2013 TeraScale
2009-2015 TeraScale 2
2010-2013 TeraScale 3
2011-2020 GCN 1.0
2013-2017 GCN 2.0
2014-2019 GCN 3.0
2016-2020 GCN 4.0
2017-2020 GCN 5.0
2018-2021 GCN 5.1
2019-2020 RDNA 1.0
2020-2022 RDNA 2.0
2020 CDNA 1.0
2021 CDNA 2.0
2022 RDNA 3.0

AMD APUs
https://www.techpowerup.com/gpu-specs/ati-rs200.g617

--------------------------------
AMD FAMILIES:

https://www.techpowerup.com/gpu-specs/ati-rage-2.g311
All Rage 2 GPUs
ATI Rage 2

https://www.techpowerup.com/gpu-specs/ati-rage-3-turbo.g884
All Rage 3 GPUs
ATI Rage 3
ATI Rage 3 Turbo

https://www.techpowerup.com/gpu-specs/?architecture=Rage+4&sort=generation
https://www.techpowerup.com/gpu-specs/ati-m1.g246
All Rage 4 GPUs
ATI M1
ATI M3
ATI M4
ATI Rage 4
ATI Rage 4 PRO
ATI Rage Mobility

https://www.techpowerup.com/gpu-specs/ati-rage-6.g616
All Rage 6 GPUs
ATI ES1000
ATI M6
ATI R100
ATI Rage 6
ATI RS200
ATI RS250
ATI RV100

https://www.techpowerup.com/gpu-specs/ati-rs100.g620
All Rage 7 GPUs
ATI M7
ATI M9
ATI M9+
ATI R200
ATI R250
ATI RC300
ATI RS100
ATI RS300
ATI RS350
ATI RV200
ATI RV250
ATI RV280

https://www.techpowerup.com/gpu-specs/ati-rs400.g624
All Rage 8 GPUs
ATI M10
ATI R300
ATI R350
ATI RC410
ATI RS400
ATI RV350

https://www.techpowerup.com/gpu-specs/ati-m24.g235
All Rage 9 GPUs
ATI M11
ATI M12
ATI M22
ATI M24
ATI R360
ATI RS480
ATI RS482
ATI RS485
ATI RV360
ATI RV370
ATI RV380

https://www.techpowerup.com/gpu-specs/ati-rs600.g618
All R400 GPUs
ATI M18
ATI M26
ATI M28
ATI R420
ATI R423
ATI R430
ATI R480
ATI R481
ATI RS600
ATI RS690
ATI RS740
ATI RV410

https://www.techpowerup.com/gpu-specs/ati-rv505.g385
All R500 GPUs
ATI Hollywood
ATI M52
ATI M54
ATI M56
ATI M58
ATI M62
ATI M64
ATI M66
ATI M68
ATI M71
ATI R520
ATI R580
AMD R580
ATI R580+
ATI RV505
ATI RV515
ATI RV516
ATI RV530
ATI RV535
ATI RV560
ATI RV570

https://www.techpowerup.com/gpu-specs/ati-rv620.g63
All TeraScale GPUs
ATI M72
ATI M74
ATI M76
ATI M82
ATI M84
ATI M86
ATI M88
ATI M92
AMD M93
ATI M93
ATI M96
ATI M97
ATI M98
ATI R600
ATI R680
ATI R700
ATI RS780
ATI RS880
ATI RV610
ATI RV620
ATI RV630
ATI RV635
ATI RV670
AMD RV670
ATI RV710
ATI RV730
ATI RV740
ATI RV770
AMD RV770
ATI RV790
ATI Xenos Corona
ATI Xenos Falcon
ATI Xenos Jasper
ATI Xenos Vejle
ATI Xenos Xenon

https://www.techpowerup.com/gpu-specs/amd-lexington.g867
All TeraScale 2 GPUs
AMD Barts
AMD Blackcomb
ATI Broadway
AMD Broadway
AMD Caicos
AMD Capilano
ATI Cedar
AMD Cedar
ATI Cypress
AMD Cypress
AMD Granville
ATI Hemlock
AMD Juniper
ATI Juniper
AMD Latte
AMD Lexington
AMD Loveland
ATI Madison
AMD Onega
ATI Park
AMD Park
ATI Pinewood
AMD Pinewood
ATI Redwood
AMD Redwood
AMD Robson
AMD Seymour
AMD Sumo
AMD SuperSumo
AMD Thames
AMD Turks
ATI Turks
AMD Whistler

https://www.techpowerup.com/gpu-specs/amd-devastator-lite.g899
All TeraScale 3 GPUs
AMD Antilles
AMD Cayman
AMD Devastator
AMD Devastator Lite
AMD Scrapper
AMD Scrapper Lite
AMD Trinity GL
    
https://www.techpowerup.com/gpu-specs/amd-pitcairn.g420
All GCN 1.0 GPUs
AMD Banks
AMD Cape Verde
AMD Chelsea
AMD Curacao
AMD Durango
AMD Durango 2
AMD Exo
AMD Hainan
AMD Heathrow
AMD Jet
AMD Kryptos
AMD Litho
AMD Malta
AMD Mars
AMD Neptune
AMD New Zealand
AMD Oland
AMD Opal
AMD Pitcairn
AMD Sun
AMD Tahiti
AMD Trinidad
AMD Tropo
AMD Venus
AMD Wimbledon

https://www.techpowerup.com/gpu-specs/amd-kalindi.g674
All GCN 2.0 GPUs
AMD Beema
AMD Bonaire
AMD Emerald
AMD Grenada
AMD Hawaii
AMD Kalindi
AMD Liverpool
AMD Liverpool 16nm
AMD Neo
AMD Saturn
AMD Scorpio
AMD Spectre
AMD Spectre Lite
AMD Spectre SL
AMD Strato
AMD Tobago
AMD Vesuvius

also:
Kaveri, Kabini APUs

https://www.techpowerup.com/gpu-specs/amd-wani.g786
All GCN 3.0 GPUs
AMD Amethyst
AMD Antigua
AMD Capsaicin
AMD Fiji
AMD Meso
AMD Polaris 24
AMD Stoney
AMD Tonga
AMD Topaz
AMD Wani
AMD Weston

https://www.techpowerup.com/gpu-specs/amd-ellesmere.g795
All GCN 4.0 GPUs
AMD Baffin
AMD Ellesmere
AMD Lexa
AMD Polaris 20
AMD Polaris 21
AMD Polaris 22
AMD Polaris 23
AMD Polaris 30
AMD Polaris 31

https://www.techpowerup.com/gpu-specs/amd-raven.g816
All GCN 5.0 GPUs
AMD Banded Kestrel
AMD Fenghuang
AMD Picasso
AMD Raven
AMD Raven 2
AMD Vega 10
AMD Vega 12

https://www.techpowerup.com/gpu-specs/amd-cezanne.g994
All GCN 5.1 GPUs
AMD Cezanne
AMD Lucienne
AMD Renoir
AMD Vega 20

https://www.techpowerup.com/gpu-specs/amd-navi-10.g861
All RDNA 1.0 GPUs
AMD Navi 10
AMD Navi 12
AMD Navi 14

https://www.techpowerup.com/gpu-specs/amd-navi-23.g926
All RDNA 2.0 GPUs
AMD Lockhart
AMD Navi 21
AMD Navi 21 6nm
AMD Navi 22
AMD Navi 23
AMD Navi 24
AMD Oberon
AMD Rembrandt
AMD Ryzen C7
AMD Scarlett
AMD Van Gogh
AMD Van Gogh Lite

https://www.techpowerup.com/gpu-specs/amd-navi-32.g1000
All RDNA 3.0 GPUs
AMD Navi 31
AMD Navi 32
AMD Navi 33

https://www.techpowerup.com/gpu-specs/amd-arcturus.g927
All CDNA 1.0 GPUs
AMD Arcturus

https://www.techpowerup.com/gpu-specs/amd-aldebaran.g1002
All CDNA 2.0 GPUs
AMD Aldebaran

https://thechipcollective.com/posts/cynical/cato/
The APU is codenamed Cato and the integrated GPU specifically appears to be 
codenamed Kryptos. There are several PCI IDs shared by components codenamed 
Cato, Kryptos, Anubis, Garfield, Garfield+, Arlene, and Pooky. I suspect that 
the other names, of which several are characters in the comic strip about the 
orange cat, are related to an implementation in the Xbox One and Xbox One S, but 
I cannot confirm this. Notably, there are no references to Durango, which is 
generally held to be the name of the Xbox One’s APU.7
 
---------------------------------

NOTE: THIS LOGIC IS NOW IN inxi-perl/tools/raw_ids.pl to make processing less
error prone and also faster.

https://devicehunt.com/search/type/pci/vendor/1002/device/any
Source of amd_ids list, which is turned into amd_products like this (do in dev/):
PCI	1002	Advanced Micro Devices, Inc. [AMD/ATI]	438C	SB600 IDE	Vendor Device

sed '/^#.*\|^SB\|^RC\|IOMMU\|host control\|SMBus\|TV\|Decoder\|Theater\|Bridge\|Serial ATA\|SATA\|USB\|IDE Con\|Audio\|Modem\|Xilleon/Id' amd.raw.ids.dh.com | sed -E 's/^[^\t]+\t+[^\t]+\t+[^\t]+\t+([^\t]+)\t+([^\t]+[^\t]+)\t.*/\2\t\1/' > amd.ids

cat amd.ids | sort | uniq > amd.ids.sort

mv -f amd.ids* ../tools/lists/

---------------------------------

Always check for latesat version, grab 1002 section, that works better than using
vendor 1002 section page for some reason.
http://pci-ids.ucw.cz/v2.2/pci.ids 

# try for subvendor 1002, dont use!
# sed -E -e  's/^(\t[^\t]+.*|\t\t1002.*)/\1/' -e 's/^\t+(1002\s+)?(\S{4})\s+(.*)/\3\t\2/' ati.raw.ids.ucw | sed  '/^#\|IOMMU\|host control\|SMBus\|TV\|Decoder\|Theater\|Bridge\|Serial ATA\|SATA\|USB\|IDE Con\|Audio\|Modem\|Xilleon/Id' > ati.ids

# skip subvendor 1002
sed -E 's/^\t(\S{4})\s+(.*)/\2\t\1/' ati.raw.ids.ucw | sed '/^\s\|^#\|^1002\|SMBus\|^SB\|^RC\|IOMMU\|host control\|TV\|Decoder\|Theater\|Bridge\|Serial ATA\|SATA\|USB\|IDE Con\|Audio\|Modem\|Xilleon/Id' > ati.ids

cat ati.ids | sort | uniq > ati.ids.sort

mv -f ati.ids* ../tools/lists/

cat ../tools/lists/ati.ids ../tools/lists//amd_products > ../tools/lists/amd.merged

cat ../tools/lists/amd.merged | sort | uniq > ../tools/lists/amd.merged.sort


----------------------------------------
Biren
----------------------------------------

Vendor ID: 1ee0

https://pcisig.com/membership/member-companies?combine=&page=1&order=field_vendor_id&sort=desc&PageSpeed=noscript
Shanghai Biren Technology Co., Ltd 	7904 (1EE0 Hex) 

https://www.nextplatform.com/2022/08/25/china-launches-the-inevitable-indigenous-gpu/
No dat available yet, but note it exists.

It was absolutely inevitable that China would try to create its own GPU compute 
engines. It was never a given that it would succeed in only three years.

But with the launch of the BR series of products from Biren Technology, there is 
finally a credible homegrown GPU controlled by China for graphics and compute, 
and that is going to add even more competition to the already intense GPU 
market.
...
Wen’s company, presumably named after the Hindi term for “lord of warriors” and 
not the old English for “at the barn,” has started shipping its BR104 and BR100 
GPUs and showed them off at the Hot Chips 34 conference this week.

This is a pretty fast ramp for a GPU to come to market, obviously. Wen put 
together a chip design team with GPU experts from all over the world, and raised 
around $800 million through the beginning of this year to fund the research, 
development, and manufacturing of the chips, the latter of which is done not at 
SMIC, but across the South China Sea in Taiwan – specifically at Taiwan 
Semiconductor Manufacturing Co, the world’s most important foundry, and 
specifically using its mature 7 nanometer processes.

Models:
BR100
BR104

----------------------------------------
InnoSilicon
----------------------------------------

https://pcisig.com/membership/member-companies?combine=&page=1&order=field_vendor_id&sort=desc&PageSpeed=noscript
Innosilicon Technology Ltd 	7880 (1EC8 Hex) 
Vendor ID: 1ec8

https://www.techpowerup.com/289123/innosilicons-fenghua-gpu-based-on-imagination-technologies-img-b-series-gpu-cores

The somewhat surprise announcement of the Innosilicon Fenghua No.1 server 
graphics card took many by surprise, but it seems like much of the tech media, 
us included, weren't paying attention, as there were hints about this card over 
a year ago. It came from no-one other than Imagination Technologies CMO, David 
Harold, in an official blog post that was posted on the 13th of October 2020.

The blog post was titled "Back in the high-performance game" and in it David 
Harold was reminiscing about his close to 20 years at Imigationation 
Technologies and how the company had started out in the 3D accelerator business 
with the Kyro "GPU". He goes on to mention last year's IMG A-Series GPU and then 
moves on to the new IMG-B Series and mentions how it's the 11th generation of 
the PowerVR architecture and how it has 70 percent higher compute density 
compared to existing desktop GPUs. He also mentions that Imagination 
Technologies has five customers working on products for the desktop, performance 
laptop and "cloud spaces" based on the PowerVR architecture and then goes on to 
mention Innosilicon by name and pointing out that they have just launched an 
IMG-B Series BXT multi-core GPU in an add-in card form-factor.

https://www.techpowerup.com/289116/chinese-innosilicon-fenghua-no-1-graphics-card-supports-pcie-4-0-hdmi-2-1-gddr6x-directx
Chinese company Innosilicon Technology has recently announced their Fenghua No.1 
high-performance server graphics card. The card features a dual-fan cooling 
design with HDMI 2.1 and Embedded DisplayPort 1.4 video connectors. The card 
will utilize a PCIe 4.0 connector and features GDDR6X memory developed by 
Innosilicon Technology with potential speeds of 21 Gbps. We have seen 
announcements from Chinese companies with similar products in the past but this 
recent announcement is the first to include support for a variety of graphics 
APIs including DirectX. The press release from the company didn't specify the 
DirectX version supported but also noted that the card will support OpenGL, 
OpenGLES, OpenCL, and Vulkan which will enable VR, AR, and AI applications.

https://www.nextplatform.com/2022/09/01/gpu-engines-are-so-strategic-china-will-have-to-use-its-own/

we think the restrictions on the sale of high-end GPU accelerators is going to 
raise the profile of Biren Technology’s BR100 GPU as well as potentially those 
of other chip designers we have written about, such a Jingjia with its JM9 
series and Tianshu Zhixin with its “Big Island” GPU.


----------------------------------------
Intel
----------------------------------------
native intel gpu arch/product id list!
Intel GPU: https://dgpu-docs.intel.com/devices/hardware-table.html

text file usable version
https://dgpu-docs.intel.com/_sources/devices/hardware-table.md.txt

to make usable do:

replace: Â® with ''

# these are ok
replace: ® with ''
replace Â with ''
replace: ' | ' with \t
replace '| ' with ''
replace ' |' with ''
replace ', ' with ','

https://en.wikichip.org/wiki/intel#List_of_microarchitectures

GPU:

Integrated:

Gen1
Gen2
Gen3
Gen3.5
Gen4
Gen5
Gen5.75 ("Ironlake")
Gen6
Gen7
Gen7.5
Gen8
Gen9
Gen9.5
Gen10
Gen11
Gen12
Discrete:

Arctic Sound
Jupiter Sound

https://www.techpowerup.com/gpu-specs/intel-grantsdale.g831
Intel GPU Architecture History
1998-2002 Generation 1.0
1998 i740
2002-2003 Generation 2.0
2004-2005 Generation 3.0
2005-2006 Generation 3.5
2006-2007 Generation 4.0
2008-2010 PowerVR SGX535
2008 Generation 5.0
2008-2010 PowerVR SGX545
2010 Generation 5.75
2010-2013 Knights
2011 Generation 6.0
2012-2013 Generation 7.0
2013 Generation 7.5
2014-2015 Generation 8.0
2015-2016 Generation 9.0
2016-2020 Generation 9.5
2019-2021 Generation 11.0
2020-2021 Generation 12.1
2021-2022 Generation 12.2
2021-2022 Generation 12.5
2022 Generation 12.7

https://www.techpowerup.com/gpu-specs/intel-cedarview.g383
Intel GPU Architecture History
1998-2002 Generation 1.0
1998 i740
2002-2003 Generation 2.0
2004-2005 Generation 3.0
2005-2006 Generation 3.5
2006-2007 Generation 4.0
2008-2010 PowerVR SGX535
2008 Generation 5.0
2008-2010 PowerVR SGX545
2010 Generation 5.75
2010-2013 Knights
2011 Generation 6.0
2012-2013 Generation 7.0
2013 Generation 7.5
2014-2015 Generation 8.0
2015-2016 Generation 9.0
2016-2020 Generation 9.5
2019-2021 Generation 11.0
2020-2021 Generation 12.1
2021-2022 Generation 12.2
2021-2022 Generation 12.5
2022 Generation 12.7

See this for lists of gpus
https://en.wikipedia.org/wiki/List_of_Intel_graphics_processing_units

https://en.wikipedia.org/wiki/PowerVR

for atom series
https://www.techpowerup.com/cpu-specs/?generation=Intel+Atom&sort=generation

https://en.wikipedia.org/wiki/Intel_Atom

Cedarview / Atom
Atom N2600	Cedarview	2 / 4	1600 MHz	BGA 559	32 nm	N/A	4 W	Dec 1st, 2011
Atom N2800	Cedarview	2 / 4	1867 MHz	BGA 559	32 nm	N/A	7 W	Dec 1st, 2011
Atom D2500	Cedarview	2 / 4	1867 MHz	BGA 437	32 nm	N/A	10 W	Nov 1st, 2011
Atom D2550	Cedarview	2 / 4	1867 MHz	BGA 437	32 nm	N/A	10 W	Nov 1st, 2011
Atom D2700	Cedarview	2 / 4	2.133 GHz	BGA 437	32 nm	N/A	10 W	Nov 1st, 2011

https://www.linuxquestions.org/questions/showthread.php?p=6356213#post6356213
linuxdaddy
Also the Intel 865 chipset was the last to offer AGP slot on the motherboard.
The 915-945 had the first PCI-express slot for graphics.

---------------------------------
Gen1
https://en.wikichip.org/wiki/intel/microarchitectures/gen1
Generation 1 retroactively name; Project Auburn) is the microarchitecture for 
Intel's graphics processing unit originally utilized by the i740 and i752 and 
later in the 810/815 series chipsets (Whitney)

All Generation 1.0 GPUs
https://www.techpowerup.com/gpu-specs/intel-whitney.g222
Intel Almador
Intel Coloma
Intel Portola
Intel Solano
Intel Whitney
---------------------------------
Gen2
https://en.wikichip.org/wiki/intel/microarchitectures/gen2
utilized by Intel's Extreme Graphics and Extreme Graphics 2 graphics 
in their 845/830 chipsets (e.g. Brookdale & Springdale).
---------------------------------
Gen3
https://en.wikichip.org/wiki/intel/microarchitectures/gen3
GMA 900 in their 910/915 chipsets 

https://www.techpowerup.com/gpu-specs/intel-grantsdale.g831
TPU: Grantsdale GPU Notes
910GL, 915GL, 915G and 915GV Chipsets
https://www.techpowerup.com/gpu-specs/intel-alviso.g205
Intel GMA 900
---------------------------------
Gen3.5
https://en.wikichip.org/wiki/intel/microarchitectures/gen3.5
the microarchitecture for Intel's graphics processing unit utilized by GMA 950 
in their 945 chipsets (Lakeport & Calistoga)

https://www.techpowerup.com/gpu-specs/?architecture=Generation+3.5&sort=generation
---------------------------------
Gen4
https://en.wikichip.org/wiki/intel/microarchitectures/gen4
the microarchitecture for Intel's graphics processing unit utilized by 3000 
series GMA. Those GPUs were used in Bearlake and Crestline-based chipsets
(Santa Rosa platform)

https://www.techpowerup.com/gpu-specs/gma-3100.c1793
Bearlake GPU Notes
G31, G33, G35, Q33 and Q35 Chipsets

https://www.techpowerup.com/gpu-specs/?architecture=Generation+4.0&sort=generation
GMA Graphics (GMA 3000 IGP)
GMA 3000	Broadwater	Jun 1st, 2006	FSB	System Shared	667 MHz	System Shared	4 / 0 / 4 / 4
GMA 3000	Broadwater	Jun 1st, 2006	FSB	System Shared	667 MHz	System Shared	4 / 0 / 4 / 4
GMA X3000	Broadwater	Jun 1st, 2006	FSB	System Shared	667 MHz	System Shared	4 / 0 / 4 / 4
GMA Graphics (GMA 3100 IGP)
GMA 3100	Bearlake	May 9th, 2007	FSB	System Shared	400 MHz	System Shared	4 / 0 / 4 / 4
GMA 3100	Bearlake	May 9th, 2007	FSB	System Shared	400 MHz	System Shared	8 / 1 / 8 / 1
GMA 3150	Pineview	May 9th, 2007	FSB	System Shared	400 MHz	System Shared	16 / 2 / 1
GMA Graphics (GMA 3500 IGP)
GMA X3500	Bearlake	Aug 1st, 2007	FSB	System Shared	667 MHz	System Shared	8 / 1 / 8 / 1
GMA Graphics-M (GMA 3000 IGP)
GMA 3000	Broadwater	Jun 1st, 2006	FSB	System Shared	400 MHz	System Shared	4 / 0 / 4 / 4
GMA X3000	Broadwater	Jun 1st, 2006	FSB	System Shared	500 MHz	System Shared	8 / 1 / 8 / 1
GMA Graphics-M (GMA 3100 IGP)
GMA 3100	Bearlake	May 9th, 2007	FSB	System Shared	400 MHz	System Shared	4 / 0 / 4 / 4
GMA 3150	Pineview	May 9th, 2007	PCI	System Shared	400 MHz	System Shared	16 / 2 / 1
GMA X3100	Crestline	May 9th, 2007	FSB	System Shared	500 MHz	System Shared	8 / 1 / 8 / 1
GMA X3100	Broadwater	May 9th, 2007	FSB	System Shared	500 MHz	System Shared	8 / 1 / 8 / 1

---------------------------------
Gen5
https://en.wikichip.org/wiki/intel/microarchitectures/gen5
the microarchitecture for Intel's graphics processing unit utilized by 
GMA 4500 series. Those GPUs were used in Eaglelake and Cantiga-based chipsets 
(Montevina platform). 
---------------------------------
Gen5.75 
https://en.wikichip.org/wiki/intel/microarchitectures/gen5.75
(Generation 5.75 or Enhanced Generation 5 or Ironlake) is the microarchitecture 
for Intel's graphics processing unit utilized by Westmere-based microprocessors. 
Gen5.75 is the successor to Gen5 which was used by Intel's Cantiga chipsets. The 
Gen5.75 microarchitecture is designed separately by Intel, fabricated on a 
separate die and then packaged on the same physical package as the CPU die.
---------------------------------
Gen6
https://en.wikichip.org/wiki/intel/microarchitectures/gen6
the microarchitecture for Intel's graphics processing unit utilized by Sandy 
Bridge-based microprocessors. Gen6 is the successor to Gen5.75 used by Westmere. 
The Gen6 microarchitecture is designed separately by Intel and then integrated 
onto the same Sandy Bridge SoC die.
Aka: Generation 2, 2nd Generation
---------------------------------
Gen7 
https://en.wikichip.org/wiki/intel/microarchitectures/gen7
the microarchitecture for Intel's graphics processing unit utilized by Ivy 
Bridge-based microprocessors. Gen7 is the successor to Gen6 used by Sandy 
Bridge. The Gen7 microarchitecture is designed separately by Intel and then 
integrated onto the same Ivy Bridge SoC die.
---------------------------------
Gen7.5
https://en.wikichip.org/wiki/intel/microarchitectures/gen7.5
the microarchitecture for Intel's graphics processing unit utilized by 
Haswell-based microprocessors. Gen7.5 is the successor to Gen7 used by Ivy 
Bridge. The Gen7.5 microarchitecture is designed separately by Intel and then 
integrated onto the same Haswell SoC die.
---------------------------------
Gen8 
https://en.wikichip.org/wiki/intel/microarchitectures/gen8
the microarchitecture for Intel's graphics processing unit utilized by 
Broadwell-based microprocessors. Gen8 is the successor to Gen7.5 used by 
Haswell. The Gen8 microarchitecture is designed separately by Intel and then 
integrated onto the same Broadwell SoC die.
---------------------------------
Gen9
https://en.wikichip.org/wiki/intel/microarchitectures/gen9
the microarchitecture for Intel's graphics processing unit utilized by 
Skylake-based microprocessors. Gen9 is the successor to Gen8 used by Broadwell. 
The Gen9 microarchitecture is designed separately by Intel and then integrated 
onto the same Skylake SoC die.
---------------------------------
Gen9.5 
https://en.wikichip.org/wiki/intel/microarchitectures/gen9.5
the microarchitecture for Intel's graphics processing unit utilized by Kaby 
Lake-based, Coffee Lake-based, Comet Lake-based,and Goldmont Plus-based 
microprocessors. Gen9.5 is the successor to Gen9 used by Skylake and introduces 
a number of light enhancements.
---------------------------------
Gen10
https://en.wikichip.org/wiki/intel/microarchitectures/gen10
 microarchitecture for Intel's graphics processing unit utilized by 
Cannonlake-based microprocessors. Gen10 is the successor to Gen9.5 used by Kaby 
Lake.

The display portion of this architecture is also used by Goldmont Plus, however, 
it still uses Gen9.5 for the execution units.

NOTE: Due to Intel skipping over Cannon Lake, Gen10 graphics have never been 
productized.
---------------------------------
Gen11
https://en.wikichip.org/wiki/intel/microarchitectures/gen11
the microarchitecture for Intel's graphics processing unit utilized by 
Icelake-based microprocessors. Gen11 is the successor to Gen10 used by Cannon 
Lake.

https://www.notebookcheck.net/UHD-Graphics-G7-Lakefield-GT2-64-EU-vs-UHD-Graphics-Xe-32EUs-Tiger-Lake-H-vs-UHD-Graphics-Elkhart-Lake-16-EU_10406_10669_11377.247598.0.html
---------------------------------
Gen12
https://en.wikichip.org/wiki/intel/microarchitectures/gen12
the microarchitecture for Intel's graphics processing unit utilized by Tiger 
Lake -based microprocessors. Gen12 is the successor to Gen11 used by Ice Lake.

BUT:

Gen 12.1
https://www.techpowerup.com/gpu-specs/?architecture=Generation+12.1&sort=generation
Xe Graphics
Xe DG1	DG1	Never Released	PCIe 4.0 x8	4 GB, LPDDR4X, 128 bit	900 MHz	2133 MHz	640 / 40 / 20
Xe DG1-SDV	DG1	Never Released	PCIe 4.0 x8	8 GB, LPDDR4X, 128 bit	900 MHz	2133 MHz	768 / 48 / 24
H3C Graphics
H3C XG310	DG1	Nov 11th, 2020	PCIe 3.0 x16	8 GB, LPDDR4X, 128 bit	900 MHz	2133 MHz	768 / 48 / 24
HD Graphics (Rocket Lake)
UHD Graphics	Rocket Lake GT1	2021	Ring Bus	System Shared	300 MHz	System Shared	128 / 8 / 8
UHD Graphics 730	Rocket Lake GT1	Mar 30th, 2021	Ring Bus	System Shared	300 MHz	System Shared	192 / 12 / 8
UHD Graphics 750	Rocket Lake GT1	Mar 30th, 2021	Ring Bus	System Shared	300 MHz	System Shared	256 / 16 / 8
HD Graphics-M (Tiger Lake)
UHD Graphics	Tiger Lake GT1	2021	Ring Bus	System Shared	350 MHz	System Shared	256 / 16 / 8
Iris Xe Graphics G4	Tiger Lake GT2	Sep 2nd, 2020	Ring Bus	System Shared	300 MHz	System Shared	384 / 24 / 12
Iris Xe Graphics G7 80EU	Tiger Lake GT2	Sep 2nd, 2020	Ring Bus	System Shared	300 MHz	System Shared	640 / 40 / 20
Iris Xe Graphics G7 96EU	Tiger Lake GT2	Sep 2nd, 2020	Ring Bus	System Shared	300 MHz	System Shared	768 / 48 / 24
Iris Xe MAX Graphics	DG1	Oct 31st, 2020	PCIe 4.0 x8	4 GB, LPDDR4X, 128 bit	300 MHz	2133 MHz	768 / 48 / 24
HD Graphics-W (Rocket Lake)
UHD Graphics P750	Rocket Lake GT1	2021	Ring Bus	System Shared	300 MHz	System Shared	256 / 64 / 32

Gen 12.2
https://www.techpowerup.com/gpu-specs/?architecture=Generation+12.2&sort=generation
HD Graphics (Alder Lake)
UHD Graphics 710	Alder Lake GT1	Jan 4th, 2022	Ring Bus	System Shared	300 MHz	System Shared	128 / 8 / 8
UHD Graphics 730	Alder Lake GT1	Jan 4th, 2022	Ring Bus	System Shared	300 MHz	System Shared	192 / 12 / 8
UHD Graphics 770	Alder Lake GT1	Nov 4th, 2021	Ring Bus	System Shared	300 MHz	System Shared	256 / 16 / 8
HD Graphics-M (Alder Lake)
UHD Graphics 48EU	Alder Lake GT1	Jan 4th, 2022	Ring Bus	System Shared	300 MHz	System Shared	384 / 24 / 12
UHD Graphics 64EU	Alder Lake GT1	Jan 4th, 2022	Ring Bus	System Shared	300 MHz	System Shared	512 / 32 / 16
Iris Xe Graphics 80EU	Alder Lake GT1	Jan 4th, 2022	Ring Bus	System Shared	300 MHz	System Shared	640 / 40 / 20
Iris Xe Graphics 96EU	Alder Lake GT1	Jan 4th, 2022	Ring Bus	System Shared	300 MHz	System Shared	768 / 48 / 24

Gen12.5
https://www.techpowerup.com/gpu-specs/?architecture=Generation+12.5&sort=generation
Xe Graphics
Arctic Sound 1T	Arctic Sound	2021	PCIe 4.0 x16	16 GB, HBM2e, 4096 bit	900 MHz	1200 MHz	6144 / 192 / 96
Arctic Sound 2T	Arctic Sound	2021	PCIe 4.0 x16	16 GB, HBM2e, 4096 bit	900 MHz	1200 MHz	7680 / 240 / 120
Arctic Sound-M	Arctic Sound	2022	PCIe 4.0 x16	16 GB, HBM2e, 4096 bit	900 MHz	1200 MHz	8192 / 256 / 128

Gen12.7
https://www.techpowerup.com/gpu-specs/?architecture=Generation+12.7&sort=generation
Alchemist (Arc 3)
Arc A350M	DG2-128	Mar 30th, 2022	PCIe 4.0 x8	4 GB, GDDR6, 64 bit	300 MHz	1500 MHz	768 / 48 / 24
Arc A370M	DG2-128	Mar 30th, 2022	PCIe 4.0 x8	4 GB, GDDR6, 64 bit	300 MHz	1500 MHz	1024 / 64 / 32
Arc A380	DG2-128	Unknown	PCIe 4.0 x8	4 GB, GDDR6, 64 bit	300 MHz	1500 MHz	1024 / 64 / 32
Alchemist (Arc 5)
Arc A550M	DG2-512	2022	PCIe 4.0 x16	8 GB, GDDR6, 128 bit	300 MHz	1500 MHz	2048 / 128 / 64
Alchemist (Arc 7)
Arc A730M	DG2-512	2022	PCIe 4.0 x16	12 GB, GDDR6, 192 bit	300 MHz	1500 MHz	3072 / 192 / 96
Arc A770M	DG2-512	2022	PCIe 4.0 x16	16 GB, GDDR6, 256 bit	300 MHz	1500 MHz	4096 / 256 / 128
Arc A770	DG2-512	Unknown	PCIe 4.0 x16	16 GB, GDDR6, 256 bit	300 MHz	1500 MHz	4096 / 256 / 128
Arc A780	DG2-512	2022	PCIe 4.0 x16	16 GB, GDDR6X, 256 bit	300 MHz	1093 MHz	4096 / 256 / 128


Arctic Sound 
https://en.wikichip.org/wiki/intel/microarchitectures/arctic_sound
Arctic Sound is a 10 nm microarchitecture for Intel's discrete graphics 
processing units set to be introduced in early 2020. This architecture is aimed 
at both the high-end gaming market and the data center market. Arctic Sound is 
set to be superseded by Jupiter Sound in 2022.

Jupiter Sound
https://en.wikichip.org/wiki/intel/microarchitectures/jupiter_sound
Jupiter Sound is Intel's successor to Arctic Sound, a 10 nm microarchitecture 
for discrete graphics processing units set to be introduced in 2022. This 
architecture is aimed at both the high-end gaming market and the data center 
market.
NOTE: this may have been cancelled, details unclear.


----------------------------------------
Nvidia
----------------------------------------

https://www.nvidia.com/en-us/drivers/unix/legacy-gpu/

To get latest beta or current lists:
https://www.nvidia.com/en-us/drivers/unix/
select latest production branch or beta, then:
 > Additional Information > See the README for more detailed >
 > Scroll down to II. Appendices, A. Supported NVIDIA GPU Products
 That's the full list, use mouse plus pagedown to highlight the driver you want,
 then paste that into the gpu.nv.[num].xx file, then:
 cat gpu.nv.[num].xx | sort > gpu.nv.[num].xx.sort
 
If it's a new number, either change the nv-current to use that number, or, if
maybe newer but older number, use the assignment under the main $nv_data = {...

[this example current is beta 515, but 510 was released after, so we want to
doubt check that no new devices have been added.]:

$nv_data->{'nv-510'} = $nv_data->{'nv-current'};
$nv_data->{'nv-510'}{'file'} = 'gpu.nv.510.xx.sort';

list of supported product IDs for each legacy version. This is often out of date
and doesn't get updated often, so if newer legacy release, go to a release page
for that driver and get the device product ids there.

To get the items, highlight the list of device products, then paste into 
terminal:
echo [device/id list] | awk -F "\t" '{a = a " "  tolower($2)} END {print a}' | tr ' ' "\n" | sort | uniq | tr "\n" '|' 

sample url: 
https://download.nvidia.com/XFree86/Linux-x86_64/495.46/README/supportedchips.
html#legacy_96.43.xx

Note, these pages don't get updated in general, so go to latest driver page to 
see the full list for all legacy types!

http://us.download.nvidia.com/XFree86/Linux-x86_64/510.68.02/README/supportedchips.html

https://wiki.debian.org/NvidiaGraphicsDrivers

# this is raw C way to get arch ids, see if there is comparable in /sys?
https://github.com/NVIDIA/open-gpu-kernel-modules/blob/main/src/common/inc/swref/published/nv_arch.h#L40-L46

Confirm patterns if in doubt here: https://www.techpowerup.com/

https://www.techpowerup.com/gpu-specs/nvidia-ga104.g964
NVIDIA GPU Architecture History
1998-2000 Fahrenheit
1999-2005 Celsius
2001-2003 Kelvin
2003-2005 Rankine
2003-2013 Curie
2006-2010 Tesla
2007-2013 Tesla 2.0
2010-2016 Fermi
2010-2013 VLIW Vec4
2010-2016 Fermi 2.0
2012-2018 Kepler
2013-2015 Kepler 2.0
2014-2017 Maxwell
2014-2019 Maxwell 2.0
2016-2021 Pascal
2017-2020 Volta
2018-2022 Turing
2020-2022 Ampere
2022 Hopper
2022-2023 Lovelace


----------------------------------------
Generate product ID lists for microarchitectures:
use data file from docs/nv/nv_* for the following:
--------------------

Hopper: https://en.wikipedia.org/wiki/Hopper_(microarchitecture)
Code: GH1xx
Process: TSMC-n4
note: parallel release for Lovelace (consumer)

--------------------

Lovelace: https://en.wikipedia.org/wiki/Lovelace_(microarchitecture)
Code: 
Process: 
note: parallel release with datacenter Hopper

--------------------

Ampere: https://en.wikipedia.org/wiki/Ampere_(microarchitecture)
Code: GA1xx
Process: TSMC-7nm

grep -E '\b(RTX 30[0-9]{2}|A[23456][0-9]{2}|A(2|1016|30|40|100))\b' nv/nv_515.xx.sort | awk -F "\t" '{a = a " "  tolower($2)} END {print a}' | tr ' ' "\n" | sort | uniq | tr "\n" '|'

--------------------

Turing: https://en.wikipedia.org/wiki/Turing_(microarchitecture)
Code: TU1xx
Process: TSMC-12nm

grep -E '\b(MX[45][0-9]{2}|GTX 16[0-9]{2}|RTX 20[0-9]{2}|Quadro RTX ([3456][0-9]{3}|T([46][0-9]{2}|[12][0-9]{3}|T4)))\b' nv/nv_515.xx.sort | awk -F "\t" '{a = a " "  tolower($2)} END {print a}' | tr ' ' "\n" | sort | uniq | tr "\n" '|'

--------------------

Volta: https://en.wikipedia.org/wiki/Volta_(microarchitecture)
Code: GV1xx
Process: TSMC-12nm

grep -iE '\b(Titan V|P([46]|40|[146][0-9]{2}|[12456][0-9]{3})|Quadro GV100)\b' nv/nv_515.xx.sort | awk -F "\t" '{a = a " "  tolower($2)} END {print a}' | tr ' ' "\n" | sort | uniq | tr "\n" '|'

--------------------

Pascal: https://en.wikipedia.org/wiki/Pascal_(microarchitecture)
Code: GP10x
Process: TSMC-16nm

grep -iE '\b(MX[23][0-9]{2}|GPU100|P100|Titan Xp?|GTX 10[0-9]{2})\b' nv/nv_515.xx.sort | awk -F "\t" '{a = a " "  tolower($2)} END {print a}' | tr ' ' "\n" | sort | uniq | tr "\n" '|'

--------------------

Maxwell: https://en.wikipedia.org/wiki/Maxwell_(microarchitecture)
Code: GM2xx/GM10(0-6,8)
Process: TSMC-28nm

grep -iE '\b(MX(1[123])[0-9]|GM[12][0-9]{2}|GTX? (745|750|8[3456][0-9]M)|Quadro M[0-9]{3,4}M?|GTX 9[0-9]{2}A?)\b' nv/nv_515.xx.sort | awk -F "\t" '{a = a " "  tolower($2)} END {print a}' | tr ' ' "\n" | sort | uniq | tr "\n" '|'

--------------------

Kepler: https://en.wikipedia.org/wiki/Kepler_(microarchitecture)
Code: GK[12]xx/GF1(16-19)/GM107
Process: TSMC-28nm

--------------------

Fermi: https://en.wikipedia.org/wiki/Fermi_(microarchitecture)
Code: GF1(00-15)/GT216
Process: 40/28nm 

--------------------

Tesla: https://en.wikipedia.org/wiki/Tesla_(microarchitecture)
Code: MCP7A/GT1xx/GT2(00-15)/G[89]x
Process: 90/80/65/55/40 nm

--------------------

Curie: https://en.wikipedia.org/wiki/Curie_(microarchitecture)
Code: MCP[56]x/NV4[012345]/G7x
process: 110/90/80 nm


----------------------------------------
https://en.wikipedia.org/wiki/List_of_Nvidia_graphics_processing_units
for microarch names and product names

https://github.com/NVIDIA/nvidia-installer/blob/main/nvLegacy.h
code legacy detections, with product ids and legacy version

No documentation on which GPUs this driver supports
https://github.com/NVIDIA/open-gpu-kernel-modules/issues/18

list of 515 supporting product ids/card names:
https://download.nvidia.com/XFree86/Linux-x86_64/515.43.04/README/gsp.html

Clarification on GPU support for Maxwell/Pascal archs and binary/OS relationship
https://github.com/NVIDIA/open-gpu-kernel-modules/issues/19#issuecomment-1124905002
----------------------------------------
https://nvidia.custhelp.com/app/answers/detail/a_id/3142

Support timeframes for Unix legacy GPU releases
Updated 04/22/2022 09:05 AM
Support timeframes for Unix legacy GPU releases

The Linux 470.* legacy driver series is the last to support GKxxx ("Kepler") 
GPUs. Support for new Linux kernels and X servers, as well as fixes for critical 
bugs, will be included in 470.* legacy releases for the remainder of the 
relevant product support lifetime. See the knowledgebase articles for support of 
Kepler-series [GeForce see 
https://nvidia.custhelp.com/app/answers/detail/a_id/5202 ] and [Quadro see 
https://nvidia.custhelp.com/app/answers/detail/a_id/5210 ] for more information.

The Linux 390.* legacy driver series is the last to support GF1xx ("Fermi") 
GPUs. Support for new Linux kernels and X servers, as well as fixes for critical 
bugs, will be included in 390.* legacy releases through the end of 2022.

The Linux 340.* legacy driver series is the last to support the G8x, G9x, and 
GT2xx GPUs, and motherboard chipsets based on them. Support for X.Org xserver 
version 1.20 was added to the 340.* legacy driver series with version 340.107, 
and support for Linux kernels up to Linux 5.4 was added with version 340.108. No 
further releases from the 340.* series are planned.

The Linux 304.* legacy driver series is the last to support the NV4x and G7x 
GPUs and motherboard chipsets based on them. Support for X.Org xserver version 
1.19 was added to the 304.* legacy driver series with version 304.134, and 
support for Linux kernels up to Linux 4.13 was added with version 304.137. No 
further releases from the 304.* series are planned.

Support for X.Org xserver version 1.15 was added to the 173.14.* legacy driver 
series with version 173.14.39. No further releases from the 173.14.* series are 
planned.

Support for X.Org xserver version 1.12 was added to the 96.43.* legacy driver 
series with version 96.43.23. No further releases from the 96.43.* series are 
planned.

No further releases from the 71.86.* legacy driver series are planned.

For more information about the GPUs supported by each Legacy GPU driver series, 
please see: http://www.nvidia.com/object/IO_32667.html [ which redirects now to: 
https://www.nvidia.com/en-us/drivers/unix/legacy-gpu/ ]
---------------------------------------
Read about the new open sourcing of the 515 nvidia module:

https://developer.nvidia.com/blog/nvidia-releases-open-source-gpu-kernel-modules/
https://us.download.nvidia.com/XFree86/Linux-x86_64/515.43.04/README/kernel_open.html
https://github.com/NVIDIA/open-gpu-kernel-modules
https://www.phoronix.com/scan.php?page=article&item=nvidia-open-kernel&num=1
https://blogs.gnome.org/uraeus/2022/05/11/why-is-the-open-source-driver-release-from-nvidia-so-important-for-linux/

========================================
KMS/DRM/DRI
----------------------------------------
Complicated to understand, these resources may help:

----------------------------------------

https://dri.freedesktop.org/wiki/DRM/
----------------------------------------
Direct Rendering Manager (DRM)

The DRM is a kernel module that gives direct hardware access to DRI clients.

This module deals with DMA, AGP memory management, resource locking, and secure 
hardware access. In order to support multiple, simultaneous 3D applications the 
3D graphics hardware must be treated as a shared resource. Locking is required 
to provide mutual exclusion. DMA transfers and the AGP interface are used to 
send buffers of graphics commands to the hardware. Finally, there must be 
security to prevent clients from escalating privilege using the graphics 
hardware. 

Q: Where does the DRM reside?

Since internal Linux kernel interfaces and data structures may be changed at any 
time, DRI kernel modules must be specially compiled for a particular kernel 
version. The DRI kernel modules reside in the 
/lib/modules/.../kernel/drivers/gpu/drm directory. (The kernel modules were in 
the /lib/modules/.../kernel/drivers/char/drm directory before version 2.6.26.) 
Normally, the X server automatically loads whatever DRI kernel modules are 
needed.

For each 3D hardware driver there is a kernel module, each of which requires the 
generic DRM support code.

The source code is at git://anongit.freedesktop.org/git/mesa/drm 

Q: In what way does the DRM support the DRI?

The DRM supports the DRI in three major ways:

1. The DRM provides synchronized access to the graphics hardware. The direct 
rendering system has multiple entities (i.e., the X server, multiple 
direct-rendering clients, and the kernel) competing for direct access to the 
graphics hardware. Hardware that is currently available for PC-class machines 
will lock up if more than one entity is accessing the hardware (e.g., if two 
clients intermingle requests in the command FIFO or (on some hardware) if one 
client reads the framebuffer while another writes the command FIFO). The DRM 
provides a single per-device hardware lock to synchronize access to the 
hardware. The hardware lock may be required when the X server performs 2D 
rendering, when a direct-rendering client is performing a software fallback that 
must read or write the frame buffer, or when the kernel is dispatching DMA 
buffers. This hardware lock may not be required for all hardware (e.g., high-end 
hardware may be able to intermingle command requests from multiple clients) or 
for all implementations (e.g., one that uses a page fault mechanism instead of 
an explicit lock). In the later case, the DRM would be extended to provide 
support for this mechanism. For more details on the hardware lock requirements 
and a discussion of the performance implications and implementation details, 
please see [FOM99].
    
2. The DRM enforces the DRI security policy for access to the graphics hardware. 
The X server, running as root, usually obtains access to the frame buffer and 
MMIO regions on the graphics hardware by mapping these regions using /dev/mem. 
The direct-rendering clients, however, do not run as root, but still require 
similar mappings. Like /dev/mem, the DRM device interface allows clients to 
create these mappings, but with the following restrictions: 

* The client may only map regions if it has a current connection to the X 
server. This forces direct-rendering clients to obey the normal X server 
security policy (e.g., using xauth). 

* The client may only map regions if it can open /dev/drm?, which is only 
accessible by root and by a group specified in the XF86Config file (a file that 
only root can edit). This allows the system administrator to restrict direct 
rendering access to a group of trusted users. 

* The client may only map regions that the X server allows to be mapped. The X 
server may also restrict those mappings to be read-only. This allows regions 
with security implications (e.g., those containing registers that can start DMA) 
to be restricted.
    
3. The DRM provides a generic DMA engine. Most modern PC-class graphics hardware 
provides for DMA access to the command FIFO. Often, DMA access has been 
optimized so that it provides significantly better throughput than does MMIO 
access. For these cards, the DRM provides a DMA engine with the following 
features: 

* The X server can specify multiple pools of different sized buffers which are 
allocated and locked down. 

* The direct-rendering client maps these buffers into its virtual address space, 
using the DRM API. 

* The direct-rendering client reserves some of these buffers from the DRM, fills 
the buffers with commands, and requests that the DRM send the buffers to the 
graphics hardware. Small buffers are used to ensure that the X server can get 
the lock between buffer dispatches, thereby providing X server interactivity. 
Typical 40MB/s PCI transfer rates may require 10000 4kB buffer dispatches per 
second. 

* The DRM manages a queue of DMA buffers for each OpenGL GLXContext, and detects 
when a GLXContext switch is necessary. Hooks are provided so that a 
device-specific driver can perform the GLXContext switch in kernel-space, and a 
callback to the X server is provided when a device-specific driver is not 
available (for the sample implementation, the callback mechanism is used because 
it provides an example of the most generic method for GLXContext switching). The 
DRM also performs simple scheduling of DMA buffer requests to prevent GLXContext 
thrashing. When a DMA is swapped a significant amount of data must be read from 
and/or written to the graphics device (between 4kB and 64kB for typical 
hardware). 

* The DMA engine is generic in the sense that the X server provides information 
at run-time on how to perform DMA operations for the specific hardware installed 
on the machine. The X server does all of the hardware detection and setup. This 
allows easy bootstrapping for new graphics hardware under the DRI, while 
providing for later performance and capability enhancements through the use of a 
device-specific kernel driver.

Q: Is it possible to make a DRI driver without a DRM driver in a piece of 
hardware whereby we do all accelerations in PIO mode?

The kernel provides three main things:

1. the ability to wait on a contended lock (the waiting process is put to 
sleep), and to free the lock of a dead process;
    
2. the ability to mmap areas of memory that non-root processes can't usually 
map;
    
3. the ability to handle hardware interruptions and a DMA queue. 
    
All of these are hard to do outside the kernel, but they aren't required 
components of a DRM driver. For example, the tdfx driver doesn't use hardware 
interrupts at all -- it is one of the simplest DRM drivers, and would be a good 
model for the hardware you are thinking about (in it's current form, it is quite 
generic).

Note: DRI was designed with a very wide range of hardware in mind, ranging from 
very low-end PC graphics cards through very high-end SGI-like hardware (which 
may not even need the lock). The DRI is an infrastructure or framework that is 
very flexible -- most of the example drivers we have use hardware interrupts, 
but that isn't a requirement. 

Q: Has the DRM driver support for or loading sub-drivers?

Although the [Faith99] states that the DRM driver has support for loading 
sub-drivers by calling drmCreateSub, Linus didn't like that approach. He wanted 
all drivers to be independent, so the top-level "DRM" module no longer exists 
and each DRM module is independent. 

Q: Is it possible to use floating point on the kernel?

You can use FP, but you have to jump through hoops to do so, especially if 
you're in an asynchronous context (i.e. interrupt or similar).

In process context (i.e. ioctl code) you could just decide that part of the 
calling convention of the ioctl is that the FP register state is corrupted, and 
use FP fairly freely - but realizing that FP usage is basically the same as 
"access to user mode" and can cause traps.

Oh, and getting an FP exception in the kernel is definitely illegal, and can 
(and does) cause a hung box. The FP exception handling depends on a signal 
handler cleaning the thing up.

In general, the rule would be: don't do it. It's possible, but there are a lot 
of cases you have to worry about, and it would be a lot better to do the FP 
(including any coordinate snapping) in mesa in user mode, and maybe just verify 
the values in the kernel (which can be done with fairly simple integer 
arithmetic). 

----------------------------------------
Excellent article explains it:

https://www.bitwiz.org.uk/s/how-dri-and-drm-work.html
----------------------------------------
Historical Situation

Previously, all applications which used hardware acceleration would contain a 
full implementation of the code required to allocate VRAM for the command queue, 
program the command queue processor (part of the GPU) to read commands from the 
newly allocated buffer, and to keep updating its configuration every time new 
commands were written.  There'd also be a lot of error-checking to be done to 
make sure everything went smoothly.  In addition, it'd have to handle memory 
management if it wanted to allocate more buffers in VRAM - for instance, to hold 
the contents of offscreen windows ready to be quickly copied onto the screen.  
This is a lot of programming, but is the situation we currently have with the 
Glamo chip.  The X server (both the old Kdrive-based server (Xglamo) and the 
more recent X.org driver xf86-video-glamo) contains command queue handling code, 
as does the accelerated version of mplayer.

It's pretty clear that multiple applications can't simultaneously use the 
acceleration - they'd both be trying to manage a single command queue and pool 
of VRAM in their own ways, and the results could range from instability to 
outright catastrophe.  This is one of the things DRI is here to fix.

DRM - Kernel Level Support

The Direct Rendering Manager, DRM, is the kernel part of the wider Direct 
Rendering Infrastructure (DRI).  With DRM, all the command queue and VRAM 
handling is done by the kernel, and there's an ioctl interface through which 
userspace programs can ask it to do things.  For example, a program might ask to 
allocate some VRAM, and the DRM will return a unique handle by which the program 
can refer to the newly allocated VRAM.  The kernel, aware of the requests from 
the multiple programs, can coordinate memory management across them all.  If the 
program needed to read or write its VRAM, it could ask the kernel to map the 
memory into the program's address space.  The subset of the DRM ioctl interface 
which takes care of memory is called GEM [2].

Command queue handling is similar.  If the program wanted to submit a sequence 
of commands, it could call another ioctl with its commands, and the kernel would 
add it to the command queue.  Part of the beauty of all this is that only the 
kernel has to know where the objects in VRAM actually reside at any point, and 
it can move some of them out of VRAM if space becomes tight.  Userspace programs 
just use their unique handles to refer to memory, and let the kernel take care 
of making sure that the correct buffers are in the right places at the right 
times.

Finally, there's a library ("libDRM") which exists to make handling DRM's ioctls 
a little easier. .... DRI - X Server Support

"DRI" could be taken to mean the overall infrastructure which makes accelerated 
rendering possible.  The DRI interface, which is what this section is about, is 
specific to X.  It consists of a handful of X requests by which X clients can 
request that the X server allows it to carry out accelerated rendering to a 
particular window.  The client asks for a handle for the window, and uses that 
handle to tell the kernel to draw things, for instance using the 3D engine of 
the graphics hardware.  When it's finished drawing a frame, the client asks the 
X server to swap the buffers (assuming, say, a double-buffered OpenGL context) 
so that the contents are visible on the screen.

DRI is just one way to use the underlying DRM framework.  For instance, there 
are other graphics systems (such as Wayland) which also use DRM to access the 
hardware.

KMS - Kernel Modesetting

There's just one more piece to the puzzle, which is called KMS.  This could be 
the subject of a whole new article, but here's a short overview.  Previously, 
the X driver would directly program the hardware, just as it had to program the 
command queue engine itself.  With KMS, it can ask the kernel to set a certain 
display resolution, colour depth, or whatever.  At the same time, the X driver 
can send the kernel its handle for a memory buffer which should be used as the 
contents of the screen.  Since the kernel is in complete control of the actual 
programming of the hardware, it can switch back in the case of, say, a kernel 
panic or X server crash.
...
[comments]

To answer the questions from "axizhe", the DRM module resides entirely within 
the kernel, i.e. within the Linux itself. Of course, non-Linux implementations 
exist as well, e.g. DRM for BSD. The video driver module, which runs in 
userspace as part of the X server, normally sends commands to it using ioctls. 
The commands from the X server will normally be pretty dull stuff like "move 
this rectangle from point A to point B", but other things apart from X can also 
send their commands to the DRM module - for example, Mesa might send some 3D 
rendering commands.

So, there are definitely at least two parts of the equation, one in the kernel 
and at least one in userspace. Only the kernel part is called "DRM", though. 
DRI, strictly speaking, refers to the X11 protocol which coordinates things in 
order to allow accelerated rendering to be done by client programs (i.e. 
anything other than the X server itself) without interfering with the X server's 
own (accelerated or non-accelerated) rendering. However, it's not too much of a 
stretch to use the name "DRI" for the overall framework that makes any of it 
work.

----------------------------------------
Direct Rendering Infrastructure
https://en.wikipedia.org/wiki/Direct_Rendering_Infrastructure

The Direct Rendering Infrastructure (DRI) is the framework comprising the modern 
Linux graphics stack which allows unprivileged user-space programs to issue 
commands to graphics hardware without conflicting with other programs.[6] The 
main use of DRI is to provide hardware acceleration for the Mesa implementation 
of OpenGL. DRI has also been adapted to provide OpenGL acceleration on a 
framebuffer console without a display server running.[7]

DRI implementation is scattered through the X Server and its associated client 
libraries, Mesa 3D and the Direct Rendering Manager kernel subsystem.

----------------------------------------
Direct Rendering Manager + KMS
https://en.wikipedia.org/wiki/Direct_Rendering_Manager

The Direct Rendering Manager (DRM) is a subsystem of the Linux kernel 
responsible for interfacing with GPUs of modern video cards. DRM exposes an API 
that user-space programs can use to send commands and data to the GPU and 
perform operations such as configuring the mode setting of the display. DRM was 
first developed as the kernel-space component of the X Server Direct Rendering 
Infrastructure,[1] but since then it has been used by other graphic stack 
alternatives such as Wayland. 
...
The Direct Rendering Manager resides in kernel space, so user-space programs 
must use kernel system calls to request its services. However, DRM doesn't 
define its own customized system calls. Instead, it follows the Unix principle 
of "everything is a file" to expose the GPUs through the filesystem name space, 
using device files under the /dev hierarchy. Each GPU detected by DRM is 
referred to as a DRM device, and a device file /dev/dri/cardX (where X is a 
sequential number) is created to interface with it.[8][9] User-space programs 
that want to talk to the GPU must open this file and use ioctl calls to 
communicate with DRM. Different ioctls correspond to different functions of the 
DRM API. 

----------------------------------------
How do I check what drivers / layers of code are being used for my GPU?
https://unix.stackexchange.com/questions/415152/how-do-i-check-what-drivers-layers-of-code-are-being-used-for-my-gpu

I've seen this question asked a lot but it seems to always be answered wrong. 
You can simply look at the documentation of your respective distribution and 
find out which based on package names. But this runs into problems. Namely 
because the open source drivers are usually distributed with Linux and if you're 
using wayland you can't even rely on looking at the x11 video packages.

Nvidia Optimus is a type of runtime GPU switching technology and is intended at 
switching the dedicated GPU on and off on demand to save power.

DRM is the subsystem of Linux that exposes your GPU through a common interface 
to other modules and userspace applications. A driver must exist for each GPU 
family.

Further KMS is used to control displays and buffers video to and between output 
devices. This subsystem is common among gpus.

Ultimately both of these subsystems are used by the 3d graphics driver in the 
case of the X Window System. The graphics driver actually has several pieces 
including the DRI driver, the X Window driver (for 2d acceleration and mode 
setting) and OpenGL. Wayland uses EGL for 2d and 3d rendering on the display 
server and does mode setting itself and clients need extra 2d libraries for 
acceleration. This gets complicated when talking about older versions of Linux 
as the proprietary driver provides a "black box" of functionality simply 
providing its own OpenGL library and X Window as dependencies.

With most modern Linux you can simply look at which DRI driver is loaded but the 
OpenGL implementations needs to be arbitrated through what is called a GLX 
provider. Most proprietary drivers provide their own hiding the architecture 
behind it. The open source drivers use Mesa. Which one gets loaded could easily 
be broken in the past. These days libglvnd is used which provides a way to 
choose which one to use.

So your 3d driver actually consists of several different kernel modules and 
libraries. Multiple drivers may co-exist and be running at the same time.

So to see which dri drivers are installed:

ls /lib/modules/[linux version]/kernel/drivers/gpu/drm/

And to see which x11 2d drivers are installed:

ls /lib/xorg/modules/drivers/

(one hopes those directories don't vary much between distributions)

And to see which ones are loaded you can look at which modules require drm.

lsmod | grep drm

If a module is required by drm_kms_helper as well that it fits with most modern 
graphics drivers. Then to find out the path to the module:

modinfo -F filename [module name]

Then you can use your respective package manager to find the package that 
provides it. With apt-get/dpkg you can do:

dpkg -S <path to module>

Finally your GPU driver may provide its own proprietary interfaces. For example 
nvidia provides vdpau for video encoding and decoding.


========================================
WAYLAND DATA
----------------------------------------

----------------------------------------
https://wayland.freedesktop.org/docs/html/ch04.html
Chapter 4. Wayland Protocol and Model of Operation

https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_output
wl_output - compositor output region
----------------------------------------
https://l.sr.ht/jAFC.pdf

Sway project document on wl-root wayland compositor backend. Highly recommended.

----------------------------------------
https://arewewaylandyet.com/
list of programs/wm to use with wayland

----------------------------------------
http://manpages.ubuntu.com/manpages/focal/man5/sway-output.5.html

 output HDMI-A-1 mode 1920x1080 pos 1920 0 bg ~/wallpaper.png stretch
 
 output "Some Company ABC123 0x00000000" pos 1920 0
----------------------------------------
https://www.fosskers.ca/en/blog/wayland
https://ajaxnwnk.blogspot.com/2020/10/on-abandoning-x-server.html

Even Adam Jackson, the long-time release manager of X calls for the adoption of
Wayland.
----------------------------------------
Scale factor:
https://gitlab.freedesktop.org/wayland/wayland-protocols/-/issues/47

The current Wayland protocol allows clients to scale their buffers by an integer
scale factor, matching the integer-scale defined for each output and therefore
allowing their surfaces to be displayed at reasonable scale even on High-DPI
displays.

The restriction to integer scale factors however is a big issue when the ideal
scale factor for best usability falls in between two integers.

Example: On my 32" 4K display I would consider a scale factor of 1.5 to be
ideal. At a scale of 1 text becomes too small to read, while a scale factor of 2
wastes screen real-estate.

A second issue with integer scale factors is, that matching the scale of
multiple outputs with different DPI values is not possible. Example: A common
setup with this problem is a 1080p and a 1440p monitor of the same size next to
each other.

Current implementations like Gnome, KWin, wlroots fake fractional scaling by
providing clients with the next-highest integer scale factor for each output and
then downsizing the received buffer during compositing. This approach comes with
two major problems:

1. Since the client renders into a larger-than-native buffer there is a
significant performance overhead, which is especially noticeable in graphics
intensive applications such as games.

Example: on a 4K (3840 × 2160) display with an optimal scale factor of 1.5 a
game might render at 5K (5120 × 2880) resolution requiring 78% more pixels than
necessary to be rendered.

2. Downscaling causes aliasing artifacts, reducing the quality and sharpness of
the image. This is especially noticeable with text rendering. Advanced text
rendering techniques such as subpixel-rendering are completely impossible.

----------------------------------------
EGL/GBM
----------------------------------------

----------------------------------------

https://ppaalanen.blogspot.com/2012/03/what-does-egl-do-in-wayland-stack.html
Archived:
https://web.archive.org/web/20161012073727/http://ppaalanen.blogspot.com/2012/03/what-does-egl-do-in-wayland-stack.html

Wayland server

The Wayland server in the diagram is Weston with the DRM backend. The server 
does its rendering using GL ES 2, which it initialises by calling EGL. Since the 
server runs on "bare KMS", it uses the EGL DRM platform, which could really be 
called as the GBM platform, since it relies on the Mesa GBM interface. Mesa GBM 
is an abstraction of the graphics driver specific buffer management APIs (for 
instance the various libdrm_* libraries), implemented internally by calling into 
the Mesa GPU drivers.

Mesa GBM provides graphics memory buffers to Weston. Weston then uses EGL calls 
to bind them into GL objects, and renders into them with GL ES 2. A rendered 
buffer is shown on an output (monitor) by queuing a page flip via the libdrm KMS 
API.

If the EGL implementation offers the extension EGL_WL_bind_wayland_display, 
Weston will use it to register its wl_display object (facing the clients) to 
EGL. In practice, the Mesa EGL then adds a new global Wayland object to the 
wl_display. That object (or interface) is called wl_drm, and the server will 
automatically advertise that to all clients. Clients will use wl_drm for DRM 
authentication, getting the right DRM device node, and sharing graphics buffers 
with the server without copying pixels.

----------------------------------------

https://docs.voidlinux.org/config/graphical-session/wayland.html

Both GNOME and KDE Plasma have EGLStreams backends for Wayland, which means they
can use the proprietary NVIDIA drivers. Most other Wayland compositors require
drivers that implement the GBM interface. The main driver for this purpose is
provided by the mesa-dri package.

https://wiki.archlinux.org/title/wayland

GBM All except NVIDIA < 495* 	All
EGLStreams NVIDIA 	GNOME, KDE, Weston (with a third-party patch)

https://en.wikipedia.org/wiki/Generic_Buffer_Management

Generic Buffer Management

Generic Buffer Management (GBM) is an API that provides a mechanism for
allocating buffers for graphics rendering tied to Mesa. GBM is intended to be
used as a native platform for EGL on DRM or openwfd. The handle it creates can
be used to initialize EGL and to create render target buffers.[98]

Mesa GBM is an abstraction of the graphics driver specific buffer management
APIs (for instance the various libdrm_* libraries), implemented internally by
calling into the Mesa GPU drivers.

For example, the Wayland compositor Weston does its rendering using OpenGL ES 2,
which it initializes by calling EGL. Since the server runs on the "bare KMS
driver", it uses the EGL DRM platform, which could really be called the GBM
platform, since it relies on the Mesa GBM interface.

At XDC2014, Nvidia employee Andy Ritger proposed to enhance EGL in order to
replace GBM.[99] This was not taken positively by the community, and Nvidia
eventually changed their mind,[100] and took another approach.

----------------------------------------
WLROOTS
----------------------------------------

https://forum.manjaro.org/t/how-can-i-install-wlrandr/81837

wlroots > wlr-randr

basis, I assume, of swaymesg, since it's a wlroot/sway based project.

The package is called wlr-randr and it’s in the AUR. :arrow_down:

pamac build wlr-randr

That’s something similar, but it’s not actually wlrandr. It was a merge request
that never actually was merged and other things were done instead.

https://manpages.debian.org/testing/wlr-randr/wlr-randr.1.en.html

Check out our wiki to get started with wlroots. Join our IRC channel:
#sway-devel on Libera Chat.

compositors that use this, I think:

Sway
way-cooler
Wayfire

KDE Kwin fork: KWinFT: https://subdiff.org/blog/2021/wlroots-in-kwinft/

There are 3 other buggy compositor frameworks:

wlc - deprecated
Smithay - rust, glitchy
libweston - largely only used by weston, and some car OEMs apparently

----------------------------------------
X SCREEN
----------------------------------------

https://gitlab.freedesktop.org/wayland/weston/-/issues/76

Displays, screens, Xorg Screen vs Wayland Display, gpus, etc.

Several X11 or Xorg concepts do not exist on Wayland or Weston, XScreen is one
of them.
With Wayland, you also need to let go of the XScreen nomenclature. Nothing I
know of implements anything like that. It's all just one big desktop extending
to all outputs, regardless of whether it is one or more graphics cards.

========================================
VESA DATA
----------------------------------------

----------------------------------------
GOP/UGA/VBE
----------------------------------------

The main question is what are vbe/gop?
https://www.delorie.com/djgpp/doc/ug/graphics/vbe20.html
For some reason people hate to call APIs APIs, so it's hard to find more than 
it's an 'interface', which is such an absurdly loose term that it could refer to
anything from hardware to top level software apis.

----------------------------------------
This is one of the few resources where the actual term is used, API.

https://www.delorie.com/djgpp/doc/ug/graphics/vbe20.html

Guide: VBE 2.0 graphics modes

There is one major problem with the VESA standard. It was designed several years 
ago while people were still using 286 machines, so it is a real mode API with a 
16 bit interface. You can still use it from a 32 bit protected mode system like 
djgpp, but this means that every time you call a VESA function the cpu has to 
switch into real mode in order to run the 16 bit driver code, and then it has to 
switch back into protected mode before it can return to your program. These mode 
switches are slow, and can be a real performance problem because you will often 
need to switch banks many hundred times while drawing a complex image. The VBE 
2.0 API is a more recent extension to the original standard, and adds some 
features designed to improve the performance of protected mode programs.

========================================
COMPOSITOR DATA
----------------------------------------

qdbus org.kde.KWin /Compositor org.kde.kwin.Compositing.active
Gives you true or false depending on whether it is currently enabled or not

https://stackoverflow.com/questions/33195570/detect-if-compositor-is-running
To track compositor you'll need to check if selection is _NET_WM_CM_S0
is owned by anyone (assuming you are on screen 0) using XGetSelectionOwner
Check if xprop -root has this data in it

https://stackoverflow.com/questions/33195570/detect-if-compositor-is-running

https://en.wikipedia.org/wiki/Compositing_window_manager

https://fedoraproject.org/wiki/How_to_debug_Wayland_problems

----------------------------------------
All Active Compositors (used for -G compositor item):
----------------------------------------

Primary:

budgie-wm compiz compton enlightenment gnome-shell kwin_wayland kwin_x11 marco
muffin mutter

Secondary:

3dwm asc cage cagebreak cardboard clayland dcompmgr dwc dwl epd-wm fireplace
gala gamescope greenfield grefson hikari hopalong japokwm kiwmi kmscon labwc
laikawm liri lipstick maze metisse mir moblin motorcar monsterwm newm orbital
papyros perceptia phoc picom river rootston rustland sommelier sway swc swvkc
taiwins tinybox tinywl ukwm unagi unity-system-compositor velox vivarium wavy
waybox waycooler way-cooler wayfire wayhouse waymonad westeros westford weston
wio wxrc wxrd xcompmgr xfwm4 xfwm5 xfwm

----------------------------------------
Wayland/Xorg compositors:
----------------------------------------

Budgie-wm Enlightenment Gala kmscon KWin Muffin Mutter Qtile

NOTE: mutter is metacity + clutter
Note: gala is made from mutter/clutter

----------------------------------------
Wayland compositors:
----------------------------------------

https://www.phoronix.com/scan.php?page=news_item&px=Wayland-Compositors-Less-2017

https://gitlab.freedesktop.org/wlroots/wlroots/-/wikis/Projects-which-use-wlroots

Pure wayland:

asc awc cage cagebreak cardboard chameleonwm clayland comfc dwc dwl epd-wm
feathers fenestra fireplace gamescope glass greenfield grefson hikari hopalong
inaban japokwm kiwmi labwc laikawm lipstick liri mahogony marina maze
motorcar newm nucleus orbital perceptia phoc pywm river rustland simulavr
skylight sommelier sway swc swvkc tabby taiwins tinybox tinywl trinkster velox
vimway vivarium wavy waybox way-?cooler wayfire wayhouse waymonad westeros
westford weston wio\+? wxr[cd] xuake

added:
awc ChameleonWM comfc feathers fenestra Glass inaban KWinFT Mahogany Marina
Nucleus pywm SimulaVR Skylight Tabby Trinkster wio+ vimway xuake

lc added:
awc chameleonwm comfc feathers fenestra glass inaban mahogany marina
nucleus pywm simulavr skylight tabby trinkster wio+ vimway xuake

# these are wlroot compositors, as of 2022-02:

awc Cage Cagebreak ChameleonWM comfc dwl feathers fenestra gamescope Glass
hikari hopalong inaban japokwm kiwmi KWinFT labwc Mahogany Marina Nucleus phoc
pywm qtile river SimulaVR Skylight Sway Tabby tinybox Trinkster Way-Cooler
Waybox Wayfire Waymonad wio wio+ wxrc vimway vivarium xuake

Note: maze may be maze-compositor
Note: papyros > liri
Note: steamcompmgr > gamescope
Note: is qtile now wayland only? confirm
Note: is Glass only wayland? I have data for it, needs to be wayland
Note: KWinFT is a forked kwin that is pure wayland
https://subdiff.org/blog/2021/wlroots-in-kwinft/

Wayland but not standalone wm/desktop, like mutter:
kwin_wayland kwinft

----------------------------------------
X compositors:
----------------------------------------

compton compiz dcompmgr marco metisse picom steamcompmgr tinywm unagi ukwm
xcompmgr

note: moblin not sure, think x

----------------------------------------
Mir:
----------------------------------------
dead, it's own thing

----------------------------------------
Compositing WM (used with desktops):
----------------------------------------

budgie-wm 3dwm compiz enlightenment kwin_wayland kwin_x11 kwin marco muffin
mutter xfwm4 xfwm5 metisse mir

----------------------------------------
COMPOSITOR ARRAY RULES
----------------------------------------

https://stackoverflow.com/questions/46578951/list-screen-resolutions-using-wayland-weston

note these don't give me any such results, no idea why unless it's a wayland item?

--------------------------
The reply is so late but still can be useful to you or someone :)

You can see all supported video adapters by using this command

$ ls /sys/class/drm
card0
card0-VGA-1
card1
card1-DVI-I-1
card1-HDMI-A-1
card1-VGA-2

You can get all supported resolutions by this command, use the adapter which you are using

$ cat /sys/class/drm/card0-LVDS-1/modes
1366x768
1366x768

========================================
WM/compositor version (out of date)
----------------------------------------

NOTE: These are the current wm, listed is available data per for
getting version info.

This list is out of date and should be merged with the X/Wayland compositors
sections to avoid confusion, but there is some useful info here too.

https://www.phoronix.com/scan.php?page=news_item&px=Wayland-Compositors-Less-2017

unknown: means not tested or verified yet. All unknown default to 0,0 version

unsupported: means has values 0,0 which means no version test runs.

supported: means has known version data generator values.

## these are either wayland or x11/wayland wm/compositors
## budgie-wm, gnome-shell, kwin_x11, marco, muffin, mutter
## can be compositing/non compositing wm
3dwm - unknown - wm
asc - unknown
budgie-wm - unknown - wm
# owned by: compiz-core in debian
compiz - supported - wm
compton - supported
dwc - unknown
# as of version 20 is wayland compositor
enlightenment - wm - note, uses a different method for version, from xprop, so can't be used
fireplace - unknown - wm
gnome-shell - supported - wm - very slow --version execution, only show if not in System:
grefson - unknown
kmscon - unknown
kwin_wayland - unknown - wm
kwin_x11 - version not used - wm
liri - unknown # Uncertain if this is the name of the liri projectc compositor now
marco - supported - wm
metisse - unknown - wm
mir - unknown - wm
moblin - unknown
motorcar - unknown
muffin - supported - wm
mutter - supports --version, but no example seen - wm
orbital - unknown
papyros - unknown # merged into liri, along with hawaii
perceptia - unknown - wm
rustland - unknown
sway - unknown
swc - unknown
unagi - unknown
wavy - unknown
way-cooler - unknown
wayhouse - unknown
westford - unknown
weston - supports --version, but no example seen
xcompmgr - unknown

## x11 common wm/compositors that have optional compositing and are not
## shown in Compositor: item.
gala - unsupported - wm (deepin, --version works but not used, very slow)
kwin - ambuity, not in compositor: version not used - wm
metacity - ambuity, not in compositor: version not used - wm
xfwm4 - ambuity, not in compositor: version not used - wm
xfwm5 - ambuity, not in compositor: version not used - wm

========================================
DISPLAY SERVER DATA
----------------------------------------

ARCAN
https://www.phoronix.com/scan.php?page=news_item&px=Arcan-Display-Server-September

Xvesa
https://doc.slitaz.org/en:guides:xorg-xvesa

Xvesa -version
Xvesa -listmodes

========================================
MONITORS:
----------------------------------------

https://metacpan.org/pod/Parse::EDID

Note: this is MUCH better data than you get from the read-edid tools
get-edid/parse-edid, by a large factor.

----------------------------------------
https://www.perl.com/article/21/2013/4/21/Read-an-entire-file-into-a-string/

Slurping files without modules

Slurping files is not complicated though and requires just a few lines of Perl. First I open a filehandle:

open my $fh, '< $edid_file or die "Can't open file $!";

Now I can read the file contents:

my $raw_edid = do { local $/; <$fh> };

then: $edid_data = Parse::EDID::parse_edid($raw_edid)

which returns a hash reference filled with great data.

To install Parse::EDID from cpan if no package available.

sudo cpan App::cpanminus

You may need to install 'make' first, make sure you have it or install will
exit with obscure failure message.

You may also need to install perl-local-lib (local::lib) as well.

then once cpanm is installed:

sudo cpanm Parse::EDID

----------------------------------------
Nvidia non free issues:
possible case: 
cat /sys/module/nvidia_drm/parameters/modeset
Y
is N because:

nvidia-drm.modeset=0

when it needs to be 1

https://forums.developer.nvidia.com/t/no-sys-class-drm-card0-entries-on-kernel-4-15/57855/4

https://forums.developer.nvidia.com/t/sys-class-drm-enabled-reports-disabled-for-enabled-monitors/51187
falsely listing connected and enabled monitor as: /sys/class/drm/.../enabled == disabled

This is a bug, period.

https://unix.stackexchange.com/questions/584088/how-can-i-get-stable-video-output-names
issue with x drivers vs /sys/class/drm port ids mapping randomly at start.

more on this
https://bbs.archlinux.org/viewtopic.php?id=244118

----------------------------------------
https://ask.fedoraproject.org/t/change-scaling-resolution-of-primary-monitor-from-bash-terminal/19892

If yes, the corresponding gsettings setting is:

org.gnome.desktop.interface text-scaling-factor

So you can get/set the value using gsettings on the terminal:

gsettings set org.gnome.desktop.interface text-scaling-factor 1.2

and so on.

https://fedoraproject.org/wiki/Wayland_features

----------------------------------------
https://en.wikipedia.org/wiki/Extended_Display_Identification_Data

https://www.extron.com/article/uedid

good on edid, what standard, etc, timings:

Vendor/Product Identification Block – The first 18 bytes identify the display 
manufacturer and product, including serial number and date of manufacture.

EDID Structure Version & Revision – The next two bytes identify the version and 
revision of the EDID data within the structure.

Basic Display Parameters/Features – The next five bytes define characteristics 
such as whether the display accepts analog or digital inputs, sync types, 
maximum horizontal and vertical size of the display, gamma transfer 
characteristics, power management capabilities, color space, and default video 
timing.

Color Characteristics – The next 10 bytes define the RGB color space conversion 
technique to be used by the display.

Established Timings – The next three bytes define the VESA-established video 
resolutions/timings that are supported by the display. Each bit represents an 
established timing such as 640x480/60. The last of the three bytes defines the 
manufacturer's reserved timing, if any.

Standard Timing Identification – The next 16 bytes define eight additional video 
resolutions supported by the display. These resolutions must adhere to standard 
VESA defined timings.

Detailed Timing Descriptions – The next 72 bytes are organized into four 18-byte 
blocks that describe additional video resolutions in detail, so that custom 
video timings/resolutions can be supported. The first of the four blocks is 
intended to describe the display's preferred video timing. The timing data can 
be structured according to the VESA GTF - Generalized Timing Formula or CVT - 
Coordinated Video Timings standards.

Extension Flag – EDID versions 1.3 and higher allow for additional 128-byte 
blocks of data to describe increased capabilities.

----------------------------------------
https://phabricator.kde.org/R108:33a1777a5ab0668da997e18173f4a50643748f1c
----------------------------------------
Monitor EDID abbreviations
----------------------------------------
LIVE MASTER:

# Exist but IDs Unknown: Pixio, AOpen (AON?), AORUS [probably GBT], Deco Gear, 
# Eyoyo, GAEMS, GeChic, KOORUI, Lilliput, Mobile Pixels, Nexanic,
# SunFounder, TECNII, TPEKKA, V7/VSEVEN, 
# Guesses: KYY=KYY, MSI=MSI,  
# PGS: Princeton Graphic Systems; SDC: Samsung Display Co; 
# SIS: Silicon Integrated Systems; STN: Samsung Electronics America; 
# TAI: Toshiba America
my %vendors = (
'AAC' => 'AcerView',
'ACI' => 'Asus',
'ACR' => 'Acer',
'ACT' => 'Targa',
'ADI' => 'ADI',
'AIC' => 'AG Neovo',
'AMW' => 'AMW',
'ANX' => 'Acer Netxix',
'AOC' => 'AOC',
'API' => 'A Plus Info',
'APP' => 'Apple',
'ART' => 'ArtMedia',
'AST' => 'AST Research',
'AUO' => 'AU Optronics',
'BEL' => 'Beltronic',
'BMM' => 'BMM',
'BNQ' => 'BenQ',
'BOE' => 'BOE Display',
'BDS' => 'Barco',
'CMN' => 'ChiMei Innolux',
'CMO' => 'Chi Mei Optoelectronics',
'CPL' => 'Compal/ALFA',
'CPQ' => 'Compaq',
'CPT' => 'Chungwa Picture Tubes',
'CTX' => 'CTX (Chuntex)',
'CVT' => 'DGM',
'DEC' => 'DEC',
'DEL' => 'Dell',
'DON' => 'Denon',
'DPC' => 'Delta',
'DPL' => 'Digital Projection',
'DWE' => 'Daewoo',
'ECS' => 'Elitegroup',
'EIZ' => 'EIZO',
'ELS' => 'ELSA',
'ENC' => 'EIZO NANAO',
'EPI' => 'Envision',
'ETR' => 'Rotel',
'FCM' => 'Funai',
'FUJ' => 'Fujitsu',
'FUS' => 'Fujitsu Siemens',
'GBT' => 'Gigabyte',
'GFN' => 'Gefen',
'GSM' => 'LG (GoldStar)',
'GWY' => 'Gateway 2000',
'HEI' => 'Hyundai.',
'HIQ' => 'Hyundai ImageQuest',
'HIT' => 'Hitachi',
'HPN' => 'HP',
'HSD' => 'HannSpree/HannStar',
'HSL' => 'Hansol',
'HTC' => 'Hitachi/Nissei',
'HVR' => 'Hitachi',
'HWP' => 'HP',
'HWV' => 'Huawei',
'IBM' => 'IBM',
'ICL' => 'Fujitsu ICL',
'IFS' => 'InFocus',
'INO' => 'Innolab Pte',
'IQT' => 'Hyundai',
'IVM' => 'Idek Iiyama',
'IVO' => 'InfoVision Optronics/Kunshan',
'KDS' => 'Korea Data Systems (KDS)',
'KFC' => 'KFC Computek',
'KOE' => 'Kaohsiung OptoElectronics',
'KTC' => 'Kingston',
'KYY' => 'KYY',
'LCD' => 'Toshiba Matsushita',
'LEN' => 'Lenovo',
'LGD' => 'LG Display',
'LKM' => 'Adlas/Azalea',
'LNK' => 'LINK',
'LPL' => 'LG Philips',
'LTN' => 'Lite-On',
'MAG' => 'MAG InnoVision',
'MAX' => 'Belinea/Maxdata',
'MED' => 'Medion',
'MEI' => 'Panasonic',
'MEL' => 'Mitsubishi',
'MIR' => 'Miro',
'MSI' => 'MSI',
'MTC' => 'MITAC',
'NAN' => 'NANAO/EIZO',
'NCP' => 'Najing CEC Panda',
'NEC' => 'NEC',
'NEX' => 'Nexgen Mediatech',
'NOK' => 'Nokia',
'NVD' => 'Nvidia',
'ONK' => 'Onkyo',
'OPT' => 'Optoma',
'OQI' => 'ViewSonic Optiquest',
'ORN' => 'Orion',
'PBN' => 'Packard Bell',
'PCK' => 'Daewoo',
'PDC' => 'Polaroid',
'PGS' => 'Princeton',
'PHL' => 'Philips',
'PIO' => 'Pioneer',
'PNR' => 'Planar',
'PRT' => 'Princeton',
'QDI' => 'Quantum Data',
'QDS' => 'Quanta Display',
'REL' => 'Relisys',
'REN' => 'Renesas',
'SAM' => 'Samsung',
'SAN' => 'Sanyo',
'SBI' => 'Smarttech',
'SDC' => 'Samsung',
'SEC' => 'Seiko Epson',
'SEN' => 'Sensics',
'SHP' => 'Sharp',
'SGD' => 'Sigma Designs',
'SGI' => 'SGI',
'SHI' => 'Jiangsu Shinco',
'SII' => 'Silicon Image',
'SIS' => 'SIS',
'SKM' => 'Guangzhou Teclast', 
'SMC' => 'Samtron',
'SMI' => 'Smile',
'SNI' => 'Siemens Nixdorf',
'SNY' => 'Sony', 
'SPT' => 'Sceptre',
'SRC' => 'Shamrock',
'STN' => 'Samsung',
'STP' => 'Sceptre',
'SUN' => 'Sun Microsystems',
'TAI' => 'Toshiba',
'TAT' => 'Tatung',
'TOS' => 'Toshiba',
'TRL' => 'Royal Information',
'TSB' => 'Toshiba',
'UEG' => 'EliteGroup',
'UNM' => 'Unisys',
'VIT' => 'Visitech',
'VLV' => 'Valve',
'VSC' => 'ViewSonic',
'VTK' => 'Viewteck',
'VTS' => 'VTech',
'WTC' => 'Wen Technology',
'XLX' => 'Xilinx',
'YMH' => 'Yamaha',
'ZCM' => 'Zenith',
);
----------------------------------------

added:

CVT = DGM Monitors
----------------------------------------

https://github.com/openbsd/src/blob/master/sys/dev/pci/drm/drm_edid.c

This is a good list, but we don't want to use all of them because not all 
make actual user type monitors, like on desktops/laptops etc.

https://edid.tv/manufacturer/

ID 	Name 	# of EDID
AAA 	Avolites Ltd 	6
ACI 	Ancor Communications Inc 	29
ACR 	Acer Technologies 	20
ACT 	Applied Creative Technology 	3
ADA 	Addi-Data GmbH 	4
AGO 	AlgolTek, Inc. 	2
AMI 	American Megatrends Inc 	1 # 
ANX 	Acer Netxus Inc 	2
API 	A Plus Info Corporation 	1 # Acer
APP 	Apple Computer Inc 	24
ARD 	AREC Inc. 	1
ART 	Corion Industrial Corporation 	1
ASK 	Ask A/S 	2
ATO 	ASTRO DESIGN, INC. 	1
AUO 	DO NOT USE - AUO 	25 # why not? it's AU Optronics
AUS 	ASUSTek COMPUTER INC 	3
AVT 	Avtek (Electronics) Pty Ltd 	2
BBX 	Black Box Corporation 	1
BDS 	Barco Display Systems 	4
BEL 	Beltronic Industrieelektronik GmbH 	1
BMD 	Blackmagic Design 	1
BNO 	Bang & Olufsen 	2
BOE 	BOE 	13
BPS 	Barco, N.V. 	3
BSE 	Bose Corporation 	1
CAT 	Consultancy in Advanced Technology 	3
CHO 	Sichuang Changhong Corporation 	1
CHR 	christmann informationstechnik + medien GmbH & Co. KG 	4
CIN 	Citron GmbH 	1
CMN 	Chimei Innolux Corporation 	16
CMO 	Chi Mei Optoelectronics corp. 	3
CNC 	Alvedon Computers Ltd 	1
CPL 	Compal Electronics Inc 	2
CPT 	cPATH 	2
CRO 	Extraordinary Technologies PTY Limited 	1
CSO 	California Institute of Technology 	2
CTX 	Creatix Polymedia GmbH 	1
CUK 	Calibre UK Ltd 	1
DEL 	Dell Inc. 	125
DGC 	Data General Corporation 	2
DLB 	Dolby Laboratories Inc. 	1
DMO 	Data Modul AG 	1
DON 	DENON, Ltd. 	11
DPH 	Delphi Automotive LLP 	2
DPL 	Digital Projection Limited 	1
DWE 	Daewoo Electronics Company Ltd 	2
DXD 	DECIMATOR DESIGN PTY LTD 	1
EDI 	Edimax Tech. Company Ltd 	1
EGA 	Elgato Systems LLC 	1
ENC 	Eizo Nanao Corporation 	4
EPH 	Epiphan Systems Inc.  	6
ESB 	Esterline Belgium BVBA 	1
EXN 	RGB Systems, Inc. dba Extron Electronics 	3
EXP 	Data Export Corporation 	2
FNI 	Funai Electric Co., Ltd. 	1
FUN 	sisel muhendislik 	1
FUS 	Fujitsu Siemens Computers GmbH 	6
GBT 	GIGA-BYTE TECHNOLOGY CO., LTD. 	3
GEF 	GE Fanuc Embedded Systems 	1
GFN 	Gefen Inc. 	1
GGL 	Google Inc. 	2
GSM 	Goldstar Company Ltd 	130
HAN 	Hanchang System Corporation 	1
HDC 	HardCom Elektronik & Datateknik 	2
HIQ 	Kaohsiung Opto Electronics Americas, Inc. 	1 # Seen also as Hyundai ImageQuest. which is it?
HKC 	HKC OVERSEAS LIMITED 	2
HOL 	Holoeye Photonics AG 	1
HPN 	HP Inc. 	3
HRE 	Qingdao Haier Electronics Co., Ltd. 	1
HRI 	Hall Research 	2
HSD 	HannStar Display Corp 	6 # also HannSpeer
HTC 	Hitachi Ltd 	1
HWP 	Hewlett Packard 	18
HWV 	Huawei Technologies Co., Inc. 	1
HYT 	Heng Yu Technology (HK) Limited 	1
INO 	Innolab Pte Ltd 	1
INT 	Interphase Corporation 	4
INX 	Communications Supply Corporation (A division of WESCO) 	1
IPS 	IPS, Inc. (Intellectual Property Solutions, Inc.) 	1
ITE 	Integrated Tech Express Inc 	5
IVM 	Iiyama North America 	12
JVC 	JVC 	1
KDK 	Kodiak Tech 	1
KTC 	Kingston Tech Corporation 	1
KWD 	Kenwood Corporation 	1
LCD 	Toshiba Matsushita Display Technology Co., Ltd 	1
LEN 	Lenovo Group Limited 	19
LNX 	The Linux Foundation 	1
LPL 	DO NOT USE - LPL 	1
LWR 	Lightware Visual Engineering 	4
MAX 	Rogen Tech Distribution Inc 	5
MEG 	Abeam Tech Ltd 	3
MEI 	Panasonic Industry Company 	16
MEL 	Mitsubishi Electric Corporation 	1
MJI 	MARANTZ JAPAN, INC. 	1
MOM 	Momentum Data Systems 	1
MPI 	Mediatrix Peripherals Inc 	2
MST 	MS Telematica 	3
MSX 	Micomsoft Co., Ltd. 	1
MTC 	Mars-Tech Corporation 	3
MTX 	Matrox 	1
NCP 	Najing CEC Panda FPD Technology CO. ltd 	2
NCR 	NCR Electronics 	1
NEC 	NEC Corporation 	9
NEX 	Nexgen Mediatech Inc., 	1
NVD 	Nvidia 	1
ONK 	ONKYO Corporation 	3
ORN 	ORION ELECTRIC CO., LTD. 	2
OTM 	Optoma Corporation           	2
OVR 	Oculus VR, Inc. 	2
PAR 	Parallan Comp Inc 	1
PCC 	PowerCom Technology Company Ltd 	1
PHL 	Philips Consumer Electronics Company 	47
PIO 	Pioneer Electronic Corporation 	5
PLY 	Polycom Inc. 	1
PNR 	Planar Systems, Inc. 	19
PTS 	Plain Tree Systems Inc 	1
QDI 	Quantum Data Incorporated 	3
QDS 	Quanta Display Inc. 	1
REN 	Renesas Technology Corp. 	1
RTK 	DO NOT USE - RTK 	11
SAM 	Samsung Electric Company 	158
SAN 	Sanyo Electric Co.,Ltd. 	1
SEC 	Seiko Epson Corporation 	18
SGD 	Sigma Designs, Inc. 	1
SGT 	Stargate Technology 	1 # transvideo, but not consumer stuff
SHI 	Jiangsu Shinco Electronic Group Co., Ltd 	1
SHP 	Sharp Corporation 	14
SII 	Silicon Image, Inc. 	2
SIS 	Silicon Integrated Systems Corporation 	2
SKM 	Guangzhou Teclast Information Technology Limited 	1
SLA 	Systeme Lauer GmbH&Co KG 	3
SMC 	Standard Microsystems Corporation 	1
SNY 	Sony 	39
SPT 	Sceptre Tech Inc 	1
STD 	STD Computer Inc 	2
STN 	Samsung Electronics America 	1
SVS 	SVSI 	1
SYK 	Stryker Communications 	1
SYN 	Synaptics Inc 	1 # https://www.synaptics.com/products/displaylink-graphics/displaylink-products
TAI 	Toshiba America Info Systems Inc 	1
TCL 	Technical Concepts Ltd 	8
TDC 	Teradici 	2
TOP 	Orion Communications Co., Ltd. 	1
TOS 	Toshiba Corporation 	1
TSB 	Toshiba America Info Systems Inc 	8
TST 	Transtream Inc 	1
TXN 	Texas Insturments 	1
UEG 	Elitegroup Computer Systems Company Ltd 	1
UNK 	Unknown 	224
VES 	Vestel Elektronik Sanayi ve Ticaret A. S. 	8
VID 	Ingram Macrotron Germany 	2
VIT 	Visitech AS 	1
VIZ 	VIZIO, Inc 	13
VSC 	ViewSonic Corporation 	15
VTK 	Viewteck Co., Ltd. 	1
VTS 	VTech Computers Ltd 	1
WDE 	Westinghouse Digital Electronics 	1
WYR 	WyreStorm Technologies LLC 	2
WYS 	Myse Technology 	1
XLX 	Xilinx, Inc. 	4
YMH 	Yamaha Corporation 	2

https://www.laptopscreen.com/English/section/Articles/1245191276/Determine+your+LCD+screen+model+number/
Below is a list of most common laptop LCD screen manufacturers with their abbreviations:

AU Optronics - B
BOE Hydis - HB
Chi Mei / Innolux - N
Chunghwa - CLAA
HannStar - HSD
IVO - M - InfoVision Optronics/Kunshan
LG Display - LP
Samsung - LTN
Sharp - LQ or LM
Toshiba - LTM or LTD - 


https://www.lansweeper.com/knowledgebase/list-of-3-letter-monitor-manufacturer-codes/

Using all of these in inxi %vendors

search replace: 
^(\S+)\s+(.*)
\1 \2

Monitor Manufacturer Code	Monitor Manufacturer
ACI	Asus (ASUSTeK Computer Inc.)
ACR	Acer America Corp.
ACT	Targa
ADI	ADI Corporation
AMW	AMW
AOC	AOC International (USA) Ltd.
API	Acer America Corp. # A Plus Info
APP	Apple Computer, Inc.
ART	ArtMedia
AST	AST Research
AUO	AU Optronics
BMM	BMM
BNQ	BenQ Corporation
BOE	BOE Display Technology
CPL	Compal Electronics, Inc. / ALFA
CPQ	COMPAQ Computer Corp.
CTX	CTX - Chuntex Electronic Co.
DEC	Digital Equipment Corporation
DEL	Dell Computer Corp.
DPC	Delta Electronics, Inc.
DWE	Daewoo Telecom Ltd
ECS	ELITEGROUP Computer Systems
EIZ	EIZO
EPI	Envision Peripherals, Inc.
FCM	Funai Electric Company of Taiwan
FUS	Fujitsu Siemens
GSM	LG Electronics Inc. (GoldStar Technology, Inc.)
GWY	Gateway 2000
HEI	Hyundai Electronics Industries Co., Ltd.
HIQ	Hyundai ImageQuest # https://www.tvtechnology.com/be-blogs/3812
HIT	Hitachi
HSD	Hannspree/Hannstar Inc # https://en.wikipedia.org/wiki/HannStar_Display_Corporation
HSL	Hansol Electronics
HTC	Hitachi Ltd. / Nissei Sangyo America Ltd.
HWP or HPN	Hewlett Packard (HP)
IBM	IBM PC Company
ICL	Fujitsu ICL
IFS	InFocus
IQT	Hyundai
IVM	Idek Iiyama North America, Inc.
KDS	KDS USA
KFC	KFC Computek
LEN	Lenovo
LGD	LG Display
LKM	ADLAS / AZALEA
LNK	LINK Technologies, Inc.
LPL	LG Philips
LTN	Lite-On
MAG	MAG InnoVision
MAX	Maxdata Computer GmbH
MEI	Panasonic Comm. & Systems Co.
MEL	Mitsubishi Electronics
MIR	miro Computer Products AG
MTC	MITAC
NAN	NANAO
NEC	NEC Technologies, Inc.
NOK	Nokia
NVD	Nvidia # probably wrong, could be NewVisionDisplay, but not sure
OQI	OPTIQUEST
PBN	Packard Bell
PCK	Daewoo
PDC	Polaroid
PGS	Princeton Graphic Systems
PHL	Philips Consumer Electronics Co.
PRT	Princeton
REL	Relisys
SAM	Samsung
SEC	Seiko Epson Corporation
SMC	Samtron
SMI	Smile
SNI	Siemens Nixdorf
SNY	Sony Corporation
SPT	Sceptre
SRC	Shamrock Technology
STN	Samtron
STP	Sceptre
TAT	Tatung Co. of America, Inc.
TRL	Royal Information Company
TSB	Toshiba, Inc.
UNM	Unisys Corporation
VSC	ViewSonic Corporation
WTC	Wen Technology
ZCM	Zenith Data Systems

https://crozzers.github.io/screen_brightness_control/docs/0.7.2/screen_brightness_control.html

Note: these are not as reliable, confuses laptop screen oem with laptop oem. double check if in doubt!

'AAC' => 'AcerView',
'ACR' => 'Acer',
'AOC' => 'AOC',
'AIC' => 'AG Neovo',
'APP' => 'Apple Computer',
'AST' => 'AST Research',
'AUO' => 'Asus', # AU Optronics
'BNQ' => 'BenQ',
'CMO' => 'Acer', # 'Chi Mei Optoelectronics', merged with Innolux 2010
'CPL' => 'Compal',
'CPQ' => 'Compaq',
'CPT' => 'Chunghwa Picture Tubes, Ltd.', # Asus
'CTX' => 'CTX',
'DEC' => 'DEC',
'DEL' => 'Dell',
'DPC' => 'Delta',
'DWE' => 'Daewoo',
'EIZ' => 'EIZO',
'ELS' => 'ELSA',
'ENC' => 'EIZO',
'EPI' => 'Envision',
'FCM' => 'Funai',
'FUJ' => 'Fujitsu',
'FUS' => 'Fujitsu-Siemens',
'GSM' => 'LG Electronics', # LG Goldstar
'GWY' => 'Gateway 2000',
'HEI' => 'Hyundai',
'HIT' => 'Hyundai', # Hitachi, wrong
'HSL' => 'Hansol',
'HTC' => 'Hitachi/Nissei',
'HWP' => 'HP',
'IBM' => 'IBM',
'ICL' => 'Fujitsu ICL',
'IVM' => 'Iiyama',
'KDS' => 'Korea Data Systems',
'LEN' => 'Lenovo',
'LGD' => 'Asus', # LG Display
'LPL' => 'Fujitsu', # LG Philips
'MAX' => 'Belinea', # https://en.wikipedia.org/wiki/Belinea made by maxdata
'MEI' => 'Panasonic', # formerly Matsushita Electric Industrial
'MEL' => 'Mitsubishi Electronics',
'MS_' => 'Panasonic',
'NAN' => 'Nanao', # NANAO/EIZO https://www.eizoglobal.com/company/information/history/
'NEC' => 'NEC',
'NOK' => 'Nokia Data',
'NVD' => 'Fujitsu', # either Nvidia OR NewVisionDisplay https://www.newvisiondisplay.com/
'OPT' => 'Optoma',
'PHL' => 'Philips',
'REL' => 'Relisys',
'SAN' => 'Samsung', # Sanyo
'SAM' => 'Samsung',
'SBI' => 'Smarttech',
'SGI' => 'SGI',
'SNY' => 'Sony',
'SRC' => 'Shamrock',
'SUN' => 'Sun Microsystems',
'SEC' => 'Hewlett-Packard', # wrong: seiko epson
'TAT' => 'Tatung',
'TOS' => 'Toshiba',
'TSB' => 'Toshiba',
'VSC' => 'ViewSonic',
'ZCM' => 'Zenith',
'UNK' => 'Unknown',
'_YV' => 'Fujitsu',

Monitor Manufacturer Code	Monitor Manufacturer 

ACI Asus
ACR Acerp.
ACT Targa
ADI ADI
AMW AMW
AOC AOC
API Acer
APP Apple
ART ArtMedia
AST AST Research
AUO AU Optronics
BMM BMM
BNQ BenQ
BOE BOE Display Technology
CPL Compal/ALFA
CPQ COMPAQ
CTX CTX (Chuntex)
DEC DECn
DEL Dell
DPC Delta
DWE Daewoo
ECS ELITEGROUP
EIZ EIZO
EPI Envision
FCM Funai
FUS Fujitsu Siemens
GSM LG (GoldStar)
GWY Gateway 2000
HEI Hyundai.
HIQ Hyundai ImageQuest
HIT Hitachi
HSD Hannspree
HSL Hansol
HTC Hitachi
HWP Hewlett Packard (HP)
HPN Hewlett Packard (HP)
IBM IBM
ICL Fujitsu ICL
IFS InFocus
IQT Hyundai
IVM Idek Iiyama
KDS KDS USA
KFC KFC Computek
LEN Lenovo
LGD LG Display
LKM ADLAS / AZALEA
LNK LINK
LPL LG Philips
LTN Lite-On
MAG MAG InnoVision
MAX Maxdata
MEI Panasonic
MEL Mitsubishi
MIR Miro
MTC MITAC
NAN NANAO
NEC NEC
NOK Nokia
NVD Nvidia 
OQI OPTIQUEST
PBN Packard Bell
PCK Daewoo
PDC Polaroid
PGS Princeton Graphic Systems
PHL Philips
PRT Princeton
REL Relisys
SAM Samsung
SEC Seiko Epson
SMC Samtron
SMI Smile
SNI Siemens Nixdorf
SNY Sony
SPT Sceptre
SRC Shamrock
STN Samtron
STP Sceptre
TAT Tatung
TRL Royal Information
TSB Toshiba
UNM Unisys
VSC ViewSonic
WTC Wen Technology
ZCM Zenith

Monitor vendor codes seen in the wild but no idea what stand for:

https://forum.manjaro.org/t/x-org-log-suddenly-got-big-up-to-19gb/107896
 Type: Laptop System: LENOVO product: 82DM v: Lenovo XiaoXinPro-13ARE 2020
CSO [maybe thinkpad laptop screen maker?]

----------------------------------------
sub display_output()
----------------------------------------

https://linuxconfig.org/how-to-configure-your-monitors-with-xrandr-in-linux

Good explanation of monitor priority:
----------------------------------------
The results might look complex, but they’re really simple, once you break them
down. Each heading is actually a listing for one of the ports on your graphics
card. They’ll be something like DisplayPort-0 or DVI-D-0. Next to each one,
you’ll see if it’s connected or disconnected. The connected ones are obviously
the monitors that you have in use.

Next to that connection status, you’ll see whether that monitor is the primary.
After that you’ll see a notation the current resolution of your monitor with
position information, denoted by the plus signs. The first position is the x
coordinate, and the second is the y. The primary monitor will have zeroes in
these positions. A secondary monitor placed to the right, like in the image,
will have +1920 or something similar in the x position.

Dual monitor set ups have some added flags that can be useful for positioning
and priority. The --primary flag specifies the primary monitor. You can use the
--left-of and --right-of flags to set the position of your other monitors. All
together, it looks something like the example below.
----------------------------------------
https://unix.stackexchange.com/questions/667482/understanding-the-output-of-xrandr-query

----------------------------------------

If you have multiple displays, you can put them next to each other and/or under
each other and imagine that this way you get a large total area on which things
are displayed.

From the other direction, you can imagine that there is a large total area that
is divided into the partial areas that are formed by your individual displays
that are placed next to and under each other.

The line with Screen 0 refers to this large total area and indicates the minimum
and maximum dimensions that this large total area can have. These dimensions
depend on the hardware of the computer, e.g. the available memory of the
graphics card(s).

"normal left inverted right" refer to whether the display you are looking at
from the front is standing there not rotated, or rotated 90 degrees to the left,
or rotated 180 degrees (upside down), or rotated 90 degrees to the right.

For the large total area, you can think of a Cartesian coordinate system that
has an x-axis going to the right and a y-axis going down, and whose axis origin
is in the upper left corner of this large total area.

x axis and y axis indicate the coordinates where the upper left corner of a
single display should be placed in the large total area.

For example, if you have two displays side by side and the left display is 1366
units wide, like your LVDS-device, then the upper left corner of this display in
the large total area has the coordinates x-axis 0 and y-axis 0. If you don't
want the left and the right display to show partially the same things, then the
upper left corner of the right display must be shifted 1366 units to the right
on the large total area and have the coordinates x-axis 1366 and y-axis 0.

If you have installed e.g. the ARandR screen layout editor, you can save the
xrandr command line for all your currently used screens by clicking on the menu
"Layout" -> "Save as" as a .sh file, i.e. as a text file which should contain a
shell script.

========================================

----------------------------------------

----------------------------------------

----------------------------------------

================================================================================

--------------------------------------------------------------------------------

========================================

----------------------------------------

----------------------------------------

----------------------------------------

