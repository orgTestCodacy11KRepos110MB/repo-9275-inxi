================================================================================
INXI VALUES
================================================================================
FILE:    inxi-values.txt
VERSION: 5.7
DATE:    2022-10-26

----------------------------------------
Docs:
See: docs/inxi-bugs.txt
See: docs/inxi-data.txt
See: docs/inxi-resources.txt
See: docs/inxi-tools.txt
See: docs/optimization.txt
See: docs/perl-programming.txt

----------------------------------------
Comments:

The main values used by inxi internally, this is a reference so you don't
always have to look it up in the code.

NOTE: THIS IS ALMOST ALWAYS OUT OF DATE!!

================================================================================

Sections:
1. CONFIG VALUES
  USER CONFIG
2. ADVANCED ACTION SWITCHES
3. DEBUGGING SWITCHES
4. HASHED/SCALAR/BOOLEAN VALUES
5. DATA ARRAY VALUES

================================================================================
CONFIG VALUES
--------------------------------------------------------------------------------

========================================
USER CONFIG
----------------------------------------

These come from config files:
/etc/inxi.conf 
$HOME/.inxi.conf  
$HOME/.config/inxi.conf  

for pinxi:
/etc/pinxi.conf
$HOME/.pinxi.conf  
$HOME/.config/pinxi.conf 

VALUES:
ALLOW_UPDATE            # values [true|false] # internal:  $b_update = 1
ALLOW_WEATHER           # values [true|false] # internal:  $b_weather = 1
[[ LEGACY:
B_ALLOW_UPDATE          # LEGACY: values [true|false] # internal:  $b_update = 1
B_ALLOW_WEATHER         # LEGACY: values [true|false] # internal:  $b_weather = 1
B_SHOW_HOST             # LEGACY: values [true|false] # internal:  $show{'host'} = 1
]]
# Seems like less than .3 doesnt work as reliably
CPU_SLEEP               # values: [0-decimal] # $cpu_sleep = 0.3; or --sleep
# change to less, or more if you have very slow connection
DL_TIMEOUT              # values: [0-integer] # $dl_timeout = 4
DOWNLOADER              # $dl{'dl'} = curl|fetch|ftp|perl|wget
FILTER_STRING           # $filter_string = '<filter>'
LANGUAGE                # language type, once active: [de|es|no]
LIMIT                   # overrides $limit for IP output. -1 is no limit. --limit [number]
OUTPUT_TYPE             # $output_type = [json|screen|xml]
NO_DIG                  # values [true|false]
NO_DOAS                 # disables internal use of doas internally. Not related to starting with doas.
NO_HTML_WAN             # disable use of HTML WAN IP downloaders. Either use dig only, or no wan.
NO_SUDO                 # disables internal use of sudo internally. Not related to starting with sudo.
PARTITION_SORT          # what sorter to use: dev-base|fs|id|label|percent-used|size|uuid|used
PS_COUNT                # $ps_count = 5
SENSORS_CPU_NO          # $sensors_cpu_nu = 0 # see get_sensors_data
SENSORS_EXCLUDE         # remove these main, not disk or gpu, (comma separated) sensors from sensors 
SENSORS_USE             # use only these main, not disk or gpu, (comma separated) sensors 
SHOW_HOST               # values [true|false] # internal:  $show{'host'} = 1
USB_SYS                 # values [true|false]
WAN_IP_URL              # alternate url to get WAN IP data from, don't use dig. 
                        # The IP address from the URL must be the last item on the last (non\-empty) line of 
                        # the URL's page content source code.
WEATHER_SOURCE          # value [0-9]
WEATHER_UNIT            # value [m|i|mi|im]

### layout
CONSOLE_COLOR_SCHEME    # $colors{'console'} = 0
GLOBAL_COLOR_SCHEME     # $colors{'global'} = 0
IRC_COLOR_SCHEME        # $colors{'irc-gui'} = 0
IRC_CONS_COLOR_SCHEME   # $colors{'console-irc'} = 0
IRC_X_TERM_COLOR_SCHEME # $colors{'irc-virt-term'} = 0
VIRT_TERM_COLOR_SCHEME  # $colors{'virt-term'} = 0
# NOTE: the old SEP1 was for short, but no longer using short/long variants
# These are NOT used, they were maybe going to be used, but I decided against it.
SEP1_IRC=':'            # $sep{'s1-irc'} = ':'
SEP1_CONSOLE=':'        # $sep{'s1-console'} = ':'
# these will assign a separator to non irc states. Important! Using ':' can trigger stupid emoticon
# behaviors in output on IRC, so do not use those.
# NOTE: the old SEP3 map to SEP2 now
SEP2_IRC=''             # $sep{'s2-irc'} = ''  
SEP2_CONSOLE=':'        # $sep{'s2-console'} = ':

### widths
# for features like help/version will fit to terminal / console screen width.
# Console # widths will be dynamically set in main() based on cols in 
# term/console
COLS_MAX_CONSOLE        # $size{'console'} = 115
COLS_MAX_IRC            # $size{'irc'} = 130
# note, this is console out of x/display server, will also be set dynamically
# not used currently, but maybe in future
COLS_MAX_NO_DISPLAY     # $size{'no-display'} = 130
# note: < 11 forces wrap of line starter, so in practical terms, any value < 11 
# forces indent to default 2 value. So to force start key wraps, simply assign 
# a value < 11.
INDENT                  # $size{'indent'} = 11 
# auto wrap trip point of line starter. Values < 90 not recommended.
INDENT_MIN              # $size{'indent-min'} = 90 

## LEGACY: I doubt many if any people ever used these. SEP3 now maps to new SEP2 
## and SEP1 if anyone ever used them will map to SEP1
##SEP1='~'              # $sep{'s1'} = '~'
## SEP2=' '             # $sep{'s2'} = ' '
# these will assign a separator to non irc states. Important! Using ':' 
# can trigger stupid emoticon behaviors in output on IRC, so do not use those.
SEP3_IRC=''             # $sep{'irc'} = ''
SEP3_CONSOLE=':'        # $sep{'console'} = ':

================================================================================
ADVANCED ACTION SWITCHES
--------------------------------------------------------------------------------

Advanced options to trigger certain behaviors.

----------------------------------------
--alt [40-44]
----------------------------------------

40: don't use perl/tiny as downloader

41: don't use curl as a downloader option

42: don't use fetch as a downloader option

43: don't use wget as a downloader option

44: don't use curl, fetch, or wget as downloader options

----------------------------------------
--dmidecode/--force dmidecode - Set $b_dmidecode_force = 1

----------------------------------------
--host - Set $show{'host'} = 1

----------------------------------------
--no-host - disable showing hostname, default for -z

----------------------------------------
--no-ssl - Set $use{'no-ssl'} = 1, used for downloaders.

================================================================================
DEBUGGING SWITCHES
--------------------------------------------------------------------------------

========================================
DEBUG PRIMARY
----------------------------------------

These are all for user fired --debug debugger data generators.

----------------------------------------
--debug [0-9]+
----------------------------------------

$debug = [1-3|10-12|20-22]

set_debugger() sets the various actions.

1-3   - basic debugging 
10-12 - log debugging. 10 - log; 11 - full, with file data; 
        12 - full+colors [not used}
20-22 - full debugger data collector debugging, with /sys parsing

20 runs data debugger, 21-22 upload data

----------------------------------------
--ftp 
----------------------------------------

Alternate upload server for --debug 21/22

Must be in this format: ftp.yoursite.com/incoming - the /incoming directory
is required.

----------------------------------------
INTERNAL: $debugger{'gz'}
----------------------------------------

Set in set_debugger()  

$debugger{'gz'} = 1

Removes gz debugger file if 1. (--debug 22/24)

----------------------------------------
INTERNAL: $debugger{'timers'}
----------------------------------------

Set in set_debugger()

$debugger{'timers'}

Prints out execution times for debug levels between 3 and 9

----------------------------------------
--debug-arg="[args]"
----------------------------------------

Add an start argument to debugger inxi start command. Note that this is 
additive, and only triggers extra data, it does not replace the default args.

Note: these must use --debug-arg="[args]" or errors out.

$debugger{'arg'} = $arg;

----------------------------------------
--debug-arg-use="[args]"
----------------------------------------

Replaces default arguments to debugger inxi start command. Note that this should 
only be used for specific argument hangs or failures, since it replaces the 
default args.

Note: these must use --debug-arg-use="[args]" or errors out.

$debugger{'arg-use'} = $arg;

----------------------------------------
--debug-id {string}
----------------------------------------

Add unique string to debugger filename identify a debugger dataset.

$debugger{'id'} = $arg;

----------------------------------------
--debug-no-eps
----------------------------------------

Shortcut, triggers no /proc, no /sys, and no exit on error

$debugger{'no-exit'} = 1
$debugger{'no-proc'} = 1
$debugger{'sys'} = 0

----------------------------------------
--debug-no-exit
----------------------------------------

$debugger{'no-exit'} = 1

Skips exit on error, prints error messages, but does not exit

----------------------------------------
--debug-no-proc
----------------------------------------

$debugger{'no-proc'} = 1

Skips /proc debugger
 
----------------------------------------
--debug-no-sys
----------------------------------------

$debugger{'sys'} = 0

Disables /sys parsing if debugger hangs on it

----------------------------------------
--debug-proc 
----------------------------------------

$debugger{'proc'} = 1

Forces parsing of /proc directory when run as root.
  
Root does not process /proc files unless this flag is switched

----------------------------------------
--debug-proc-print
----------------------------------------

$debugger{'proc-print'} = 1

prints proc file name before copying it

----------------------------------------
--debug-sys
----------------------------------------

$debugger{'sys'} = 1
$debugger{'sys-force'} = 1

mainly for PowerPC which crashes on root /sys parsing

----------------------------------------
--debug-sys-print
----------------------------------------

$debugger{'sys-print'} = 1

For debugging /sys hangs, will show the file it hangs on.

----------------------------------------
--debug-test-1
----------------------------------------

$debugger{'test-1'} = 1

Trips sub user_debug_test_1

----------------------------------------
--debug-width/--debug-y [width]
----------------------------------------

If a value is supplied, and >= 80, uses that width. If no value supplied, uses
width 80.

$arg ||= 90;
$debugger{'width'} = $arg

----------------------------------------
--debug-z/--debug-filter
----------------------------------------

Adds -z flag to debugger run self option list.

$debugger{'filter'} = 1

----------------------------------------
--debug-zy/--debug-yz
----------------------------------------

Same as --debug-y except also triggers --debug-z.

$arg ||= 90;
$debugger{'width'} = $arg
$debugger{'filter'} = 1

========================================
DEBUGGER OUTPUT SWITCHES
----------------------------------------

Used to trigger various internal print debuggers for dev work

----------------------------------------
--dbg [0-9]+
----------------------------------------
These are activated by: --dbg [1-xx] 
Values will change, and this should be the primary reference to use them:
Sets: @dbg indexes to 1, true, for generating testing output in the system.

1. show downloader command string for download actions, download errors, etc

2. Dumper dmidecode working data array 

3. Dumper ifconfig/ip addr arrays, and @ifs_bsd for ifconfig

4. Dumper lscpi/pciconf data array 

5. Dumper ps aux array

6. Dumper lsusb short/long arrays

7. Dumper sysctl full

8. Dumper %cpu, cpuinfo_data(), cpu_sys_data(), sysctl_data()

9. Dumper @devices_[audio|graphics|hwraid|network|timer]

10. print shell data in initial shell detection

11. Dumper dmesg.boot array

12. Dumper smartctl data

13. Dumper disk @data array

14. Show Xorg.x.log file used

15. Dumper swaps data array

16. Dumper partitions data array

17. Dumper $graphics{'screens'} data array

18. Dumper sensors raw array

19. Dumper smartctl_data @data

20. Dumper set_build_prop build.prop values hash [android only]

21. Dumper hdd_temp_sys %sensors values

22. Dumper lvm/logical raw data values 

23. Dumper lvm/logical processed data values

24. Dumper disk data

25. Dumper alerts program status hash

26. Dumper sound server data

27. Dumper dmesg_boot_data(), dmidecode_data() in cpu

28. Dumper machine data in -M

29. Dumper service data, and service result.

30. pci_grabber @working

31. lm-sensors/ipmi sensors pre/post processing data

32. Dumper set_lsblk_data 

33. Dumper battery data

34. Dumper DiskDataBSD before/after building up data structures

35. Dumper UnmountedItem working data per type

36. Dumper RAM raw data 

37. Dumper RAID per type data.

38. Dumper %cpu_properties

39. Dumper sys_data_grabber() %working

40. Dumper sys_data_grabber() @files.

41. Dumper cpuinfo_grabber @cpuinfo, %cpuinfo_machine

42. undef $cpu_sys for testing purposes

43. Force use of all possible files in sys_data_grabber globs, instead of the 
optimized globs.

44. Dumper graphics set_monitors()

45. Dumper and debuggers graphics Monitor subs: map_ids()

46. Dumper @data in compositor data collectors.

47. Activate 'verbose' switch for ParseEDID, which will print to screen the 
warnings, if any. pointless, it's already output by --edid, but keep it.

48. Dumper --slots data, dmi, working data structures

49. Dumper $info hash ref in gpu_data() for gfx.

50. Dumper lspci_n_data $return

51. Advanced /sys sensors debugging, use with --dbg 18 usually

========================================
SYNTHETIC DATA SWITCHES
----------------------------------------

----------------------------------------
EMULATTION SWITCHES (MISC)
----------------------------------------

----------------------------------------
--irc - Set $b_irc = 1

----------------------------------------
FAKE OS SWITCHES
----------------------------------------

Used in conjuction with other switches to emulate as far as
possible the os type.

----------------------------------------
--arm - Set $risc{'id'} = 'arm', $risc{'arm'} = 1.

----------------------------------------
--bsd [variant] - Force $bsd_type to variant 

Values: [darwin|dragonfly|freebsd|openbsd|netbsd]

Sets: $fake{'bsd'} = 1

See --fake for specific fake bsd tools

----------------------------------------
--cygwin - Set $windows{'cygwin'} = 1;

----------------------------------------
--mips - Set $risc{'id'} = 'mips', $risc{'mips'} = 1.

----------------------------------------
--ppc - Set $risc{'id'} = 'ppc', $risc{'ppc'} = 1.

----------------------------------------
--wsl - Set $windows{'wsl'} = 1;

========================================
FAKE DATA SWITCHES
----------------------------------------

NOTE ON --fake [type]: these are useful to avoid uploading active
file reading debuggers for features, which is easy to do. These 
will skip the live data grabbers, and run the debugger file loader
instead. Obviously that will fail for non dev users without those
paths existing on their systems, but that doesn't matter since it
would only be visible to users who ran the --fake options, and those
are not listed in either -h or man page to avoid confusing users.

loads boolean trigger in corresponding %fake hash key

See also: --bsd and FAKE OS SWITCHES

grep -o "fake{'[^}]*'}" pinxi | sort | uniq

----------------------------------------
Fake BSD Data
----------------------------------------

These fake data changes are tripped by --bsd <type>, which sets the 
$fake{'bsd'} flag = 1.

These will trip the appropriate internal flags to make the data 
source be the dev data file, not the host system actual data.

----------------------------------------
--fake dboot - Sets system file dmesg.boot

----------------------------------------
--fake disklabel - Fake disklabel output

----------------------------------------
--fake pciconf - Sets alerts pciconf use; sets lspci to missing.

----------------------------------------
--fake pcictl - Sets alerts pcictl use; sets lspci to missing.

----------------------------------------
--fake pcidump - Sets alerts pcidump use; sets lspci to missing.

----------------------------------------
--fake sysctl - Sets alerts sysctl use

----------------------------------------
--fake usbconfig - Sets alerts usbconfig use; changes lsusb to 'missing'

----------------------------------------
--fake usbdevs - Sets alerts usbdevs use; change lsusb to 'missing'

----------------------------------------
Fake Standard Data
----------------------------------------

These are linux or linux and bsd, depending.

----------------------------------------
--fake bluetooth - Use fake bluetooth data, varies, eg, 
fake hciconfig.txt files, etc.

----------------------------------------
--fake compiler - Use fake kernel compiler data (linux)

----------------------------------------
--fake cpu - Use fake cpu data, varies, eg, fake cpuinfo.txt 
files, etc.

----------------------------------------
--fake dmidecode - sets no root testing for file based 
dmidecode debugger data.

----------------------------------------
--fake elbrus - fake Machine data machine_data_fruid, fake elbrus cpu data.

----------------------------------------
--fake ipmi - Use fake ipmi data, trigger ipmi in sensors

----------------------------------------
--fake logical - Use debugger data file based lvm, luks, bcache, 
and any other logical type volume data

----------------------------------------
--fake lspci - Use fake lspci data

----------------------------------------
--fake partitions - use fake df.. partition data

----------------------------------------
Fake RAID DATA

--fake raid-btrfs - use fake btrfs data. btrfs is a stub, only for dev.

--fake raid-hw - Use debugger data files.

--fake raid-lvm - Use debugger data files.

--fake raid-md - Debugger data files instead of /proc/mdstat.

--fake raid-soft - Use Debugger data files for OpenBSD softraid.

--fake raid-zfs - Debugger data files instead of zfs debugger data.

----------------------------------------
--fake sensors - Use debugger data file based lm-sensors sensors output file

----------------------------------------
--fake swaymsg - forces wayland swaymsg. Use with --wayland to emulate wayland
environment.

----------------------------------------
--fake uptime - Fake uptime strings to debug regex

----------------------------------------
--fake vmstat - Use vmstat data file.

----------------------------------------
--fake wl-info - Fake wayland weston-info/wayland-info file data.

----------------------------------------
--fake wlr-randr - fake Wayland wlr-randr files

----------------------------------------
--fake xdpyinfo - Sets fake xdpyinfo file data

----------------------------------------
--fake xorg-log - Sets fake xorg log files

----------------------------------------
--fake xrandr - fake xrandr file data

================================================================================
HASHED/SCALAR/BOOLEAN VALUES
--------------------------------------------------------------------------------

These hashes/booleans contain data that will be used for tests and data 
collection.

========================================
ACTION HASHES
----------------------------------------

These hashes will trigger various behaviors, they are either user
set, via options, or internally set flags.

See --fake for debugger tool forcings.

----------------------------------------
FORCE --force [action]
----------------------------------------

grep -o "force{'[^}]*'}" pinxi | sort | uniq

%force = (
'colors'             => [01], # same as -Y -2, do not remove colors from piped output
'cpuinfo'            => [01], # force use of cpuinfo over sys for cpu data
'display'            => [01], # force $b_display even if root or out of X
'dmidecode'          => [01], # force override use of dmidecode everywhere
'hddtemp'            => [01], # override /sys drive temps
'lsusb'              => [01], # linux, override USB_SYS config setting, restore default
'man'                => [01], # same as --man, force install of man file
'meminfo'            => [01], # force bsds to use meminfo if it's present
'no-dig'             => [01], # --no-dig: skip dig, or override and use
'no-doas'            => [01], # --no-doas: don't use doas internally
'no-html-wan'        => [01], # --no-html-wan: force dig or nothing for WAN IP
'no-sudo'            => [01], # --no-sudo: don't use sudo internally
'sensors-sys'        => [01], # force use of /sys as data source, ignore lm-sensors
'pkg'                => [01], # --rpm/--force pkg - force package counts for rpm
'usb-sys'            => [01], # linux, skip lsusb for vendor/product data
'vmstat'             => [01], # override /proc/meminfo if present
'wayland'            => [01], # -G, disable all X tools, protocol = wayland
'wmctrl'             => [01], # use wmctrl as wm source always
);

----------------------------------------
LOADED DATA SWITCHES - INTERNAL
----------------------------------------

flags for loads of features we only want to run once.

----------------------------------------

local in generate_lines(), passed by reference

grep -o "checks{'[^}]*'}" pinxi | sort | uniq

%checks = (
'device'                => [01], # DeviceData loaded
'dmi'                   => [01], # set_dmidecode_data loaded
'usb'                   => [01], # USBData loaded
);

----------------------------------------
global:

These make sure certain shared features are only run once, they store their
data globally for reuse.

Note that some places use local by ref loaded tests when they don't need to be
global, so this list is not complete for all loaded checks.

grep -o "loaded{'[^}]*'}" pinxi | sort | uniq

%loaded = (
'build-prop'            => [01], # android build.prop loaded
'con-irc-tty'           => [01], # ShellData::console_irc_tty loaded 
'cpuinfo'               => [01], # Cpuinfo read loaded
'dboot'                 => [01], # bsd dboot processor
'disk-data-bsd'         => [01], # bsd disk data
'glabel'                => [01], # GlabelData loaded
'gpu-data'              => [01], # cpu sensors data, global in case used elsewhere
'json'                  => [01], # for load_json(), test/load 1 of 3 possible modules.
'label-uuid'            => [01], # linux label/uuid fallback data
'lm-sensors'            => [01], # lm-sensors loaded, in case used in other modules.
'lsblk'                 => [01], # set_lsblk loaded
'lvm-data'              => [01], # lvm data loaded, for -L or -R
'mapper'                => [01], # set_mapper loaded
'memory'                => [01], # MemoryData loaded
'package-data'          => [01], # global package data, for -r or -I lines
'partition-data'        => [01], # many places
'ps-aux'                => [01], # set_ps_aux_data() loaded
'ps-gui'                => [01], # set ps_gui data
'raid'                  => [01], # -R, -D raid tests, raid_data() loaded
'service-tool'          => [01], # ServiceData::set() loaded
'set-partitions'        => [01], # Block partitions data set 
'set-swap'              => [01], # partition swap data loaded
'shell-data'            => [01], # ShellData::set() loaded
'tty-number'            => [01], # ShellData::tty_number loaded
);

----------------------------------------
SHOW - PRINT LINE SWITCHES
----------------------------------------

%show

This is a global that assigns print row boolean values.

These are set in the get_options function.

grep -o "show{'[^}]*'}" pinxi | sort | uniq

%show = (
'audio'            # -A/--audio
'battery'          # -b/-F battery only if present
'battery-forced    # -B/--battery even if none detected
'bluetooth'        # -E/--bluetooth
'bluetooth-forced' # -E/--bluetooth show even if no bluetooth data
'cpu'              # -C/--cpu - cpu overrides cpu-basic
'cpu-basic'        # -b/--basic/-v 1 cpu line
'cpu-flag'         # -C/--cpu/-f/--flags and full flags
'disk'             # -D/--disk - disk overrides disk-basic/disk-total
'disk-basic'       # -v 2 Disk data
'disk-total'       # -b/--basic/ -v 1 Disk
'edid'             # --edid, full edid report, trips -Ga also
'graphic'          # -G/--graphics
'graphic-basic'    # -b type graphics
'help'             # -h/--help
'host'             # -S/--system. Default: true. --alt 31/32 disable/enable
'info'             # -I/--info
'ip'               # -i/--internet
'label'            # -l/--label [-P or -p + labels]
'logical'          # -L/--logical
'machine'          # -M/--machine
'network'          # -N/--network
'network-advanced' # -n/--network-advanced/ -v 3
'no-host'          # -z/--no-host turn off host in -S
'optical'          # -d/--disk-all/--optical/ -v 6
'optical-basic'    # -F, -v5 - basic optical output
'partition'        # -P/--partition basic
'partition-full'   # -p/--partition-full
'partition-sort'   # -p/-P with custom sort type
'process'          # -t/--processes with c or m
'ps-cpu'           # -t/--processes with c [count]. Sets: $configs{'PS_COUNT'}
'ps-mem'           # -t/--processes with m [count]. Sets: $configs{'PS_COUNT'}
'raid'             # -R/--raid, sets raid, raid-forced'
'raid-basic'       # -b / -F / -v 2 raid, only show if data is there
'raid-forced'      # -R/--raid, show if raid there or not
'ram'              # -m/--memory
'ram-modules'      # --memory-modules empty slots excluded
'ram-short'        # --memory-short short form: array counts, slots, modules, type
'recommends'       # --recomnmends
'repo'             # -r / --repos
'sensor'           # -s/--sensors
'short'            # inxi short form, no args
'slot'             # --slots
'swap'             # --swap/-F
'system'           # -S/--system
'unmounted'        # -o/--unmounted
'usb'              # --usb
'uuid'             # -p/-P/-u/--uuid with UUID
'version'          # --version/-V
'weather'          # -w / --weather, distro override with $use{'weather'} false
'weather-location' # -W / --weather-location, contains location string or is null
);

$extra   # -x, -xx, -xxx, --extra [0-3]. Repeat or integer arg.
         # Either increments (-xxx) or uses option value (-x 3)
$b_admin # --admin/-a [-a sets -xxx as well]

----------------------------------------
USE SWITCHES - INTERNAL/OPTIONS
----------------------------------------

These trip specific behaviors, various, which tools to test for, filtering or 
distro maintainer blocks of features, etc.

grep -o "use{'[^}]*'}" pinxi | sort | uniq

%use = (
'block-tool'       # run lsblk/blockdev alerts tests
'bsd-audio'        # bsd audio tools
'bsd-battery'      # bsd battery data 
'bsd-cpu'          # bsd cpu tools/data
'bsd-disk'         # bsd disk tools/data
'bsd-kernel'       # bsd kernel tools/data
'bsd-machine'      # bsd machine tools/data
'bsd-memory'       # bsd memory tools/data
'bsd-optical'      # bsd optical tools/data
'bsd-partition'    # bsd partition tools/data
'bsd-pci'          # bsd pci tools/data
'bsd-raid'         # bsd raid tools/data
'bsd-ram'          # bsd ram tools/data
'bsd-sensor'       # bsd sensor tools/data
'bsd-sleep'        # bsd sleep tools/data
'btrfs'            # btrfs data
'dmidecode'        # run dmidecode alerts tests; set_dmesg_boot_data() triggers
'filter'           # -z/--filter/--za: all, filters output. $filter_string Auto
                   # on in IRC unless disabled by -Z
'filter-label'     # --filter-label/--zl/--za: filter partition labels.
'filter-override'  # -Z/--filter-override: overrides IRC filter
'filter-uuid'      # --filter-uuid/--zu/--za: filter partition UUIDs
'filter-vulnerabilities' # --filter-vulnerabilities/--zv/--za don't show cpu 
                   # vuln report
'hardware-raid'    # for -R, hw raid detected
'json'             # if json data type is to be used
'logical'          # 
'logical-general'  # 
'logica-lvm'       # run lvs alerts test
'man'              # --man -U 3/-U: force update man page for -U/-U 3
'mdadm'            # run mdadm alert tests
'no-ssl'           # --no-ssl, for downloaders
'nvidia'           # --nvidia/--nv, full nvidia non free report, mostly for legacy cards
'output-block'     # -Y output option, show in blocks, boolean
'pci'              # 
'pci-tool'         # DeviceData found one of the pci tools: lspci/pcidump/pciconf/pcictl
'sensors-default'  # 
'slot-tool'        # found slots in dmidecode, show slot data
'smartctl'         # run smartctl alerts test
'soc-audio'        # soc data found for this type
'soc-bluetooth'    # soc data found for this type
'soc-gfx'          # soc data found for this type
'soc-hwraid'       # soc data found for this type
'soc-network'      # soc data found for this type
'soc-timer'        # soc data found for this type
'sysctl'           # run sysctl alerts test
'update'           # allow -U updater, default true, distro maintainers can set in configs to false
'usb'              # run lsusb/usbdevs/usbconfig alerts tests
'usb-tool'         # --usb-tool/--force lsusb - both force lsusb, over /sys, for linux
'weather'          # allow -w/W weather, default true, distro maintainers can set in configs to false
'yes-man'          # --man force man page install for pinxi
);

========================================
ALERTS / WARNINGS
----------------------------------------
hash: %alerts

Set in: package: CheckTools::set() 

Fake BSD data set in: CheckTools::set_fake_bsd_data()

Used to test to use/not used tools, to avoid having to retest them all
over internally, these just get tested initially.

----------------------------------------
key: action - [use|missing|permissions|platform]

platform is for tools that only are found on either bsd or linux, and
are used just to determin $alerts{tool}->{action} ne use 

----------------------------------------
key: action - [no-data|smbios|unknown-error]
For dmidecode, further possible values due to complexity of dmidecode
output possible scenarios.

----------------------------------------
key: path - from check_program, is undef or the path

----------------------------------------
key: message - if action ne use, a message that can be used to print
out messages to user, if required.

========================================
CLIENT
----------------------------------------

grep -o "client{'[^}]*'}" pinxi | sort | uniq

%client = (
'con-irc-tty'      => [01],
'console-irc'      => [01],
'dcop'             => [01],
'default-shell'    => [shell name],
'default-shell-v'  => [default shell version],
'dobject'          => [default|konversation]
'dport'            => '',
'dserver'          => '',
'dtarget'          => '',
'konvi'            => [0123], # level of konvi for internal use. 2 is /cmd start
'name'             => [lower case client name]
'name-print'       => [Display version of name]
'native'           => [01], # konvi: /cmd = 0; /pinxi = 1
'pppid'            => [pppid],
'qdbus'            => [01],
'su-start'         => [01],
'test-konvi'       => [01], # debugging switch
'tty-number'       => [tty nu]
'version'          => [client version],
'whoami'           => [session user name]
);

========================================
DOWNLOADER
----------------------------------------

See also --no-ssl

grep -o "dl{'[^}]*'}" pinxi | sort | uniq

%dl = (
# switches to use specific downloader
'curl'       => [01],
'fetch'      => [01],
'ftp'        => [01],
'tiny'       => [01],
'wget'       => [01],
# options
'dl'         => [|curl|fetch|ftp|perl|wget] null means no downloader found or used.
'file'       => [arguments for downloader type for file download]
'no-ssl'     => [argument for no ssl checks: set by downloader type. 
                If --no-ssl not used, set to ''.]
'null'       => [ftp only: sets send output to /dev/null if required]
'spider'     => [wget/tiny only: spider the file to test if it's there]
'stdout'     => [arguments for downloader type for stdout output]
'timeout'    => [the time out option (eg: -T), paired with $dl_timeout]
'ua'         => [fake user agent string to send site]
)

========================================
FILE ASSIGNMENT/TESTS
----------------------------------------

set_system_files() packs %system_files

The tests will return EITHER the file path OR an empty string.

Thus, the use will be like this. I was actually surprised to find this works
in perl, but tests show it does. This will return either false, '', or the
file path. Since the path is there, it shows as true, and also the variable
has been packed for use in the following.

NOTE: need to confirm this is solid in 5.08

if (my $mount = $system_files{'proc-mounts'}){
	do stuff.
}

Each path is tested for, if present, retained, if not, 
replaced with ''.

%system_files = (
'asound-cards'    => '/proc/asound/cards',
'asound-modules'  => '/proc/asound/modules',
'asound-version'  => '/proc/asound/version',
'dmesg-boot'      => '/var/run/dmesg.boot',
'proc-cmdline'    => '/proc/cmdline',
'proc-cpuinfo'    => '/proc/cpuinfo',
'proc-mdstat'     => '/proc/mdstat',
'proc-meminfo'    => '/proc/meminfo',
'proc-modules'    => '/proc/modules', # not used
'proc-mounts'     => '/proc/mounts',# not used
'proc-partitions' => '/proc/partitions',
'proc-scsi'       => '/proc/scsi/scsi',
'proc-version'    => '/proc/version',
# dynamically set in set_xorg_log(), using various test locations
# for latest xorg log file, or using 'xset q' path
'xorg-log'        => '...',
);
      
========================================
OUTPUT SCALARS
----------------------------------------

----------------------------------------
$cpu_sleep = 0.3 # time cpu sleeps before inxi gets the speed, inxi itself
spikes the cpu when it runs so it's good to let it spin down a bit before 
losting the speed. CPU_SLEEP config item or --sleep overrides it.

----------------------------------------
$limit = 10 # for large IP output, allows users to set the limit, either in
 config file LIMIT= or with --limit switch. -1 means no limit

========================================
OUTPUT HASHES
----------------------------------------

These hashes contain the settings for colors, separators, and sizes

----------------------------------------
COLORS: %colors
----------------------------------------

grep -o "colors{'[^}]*'}" pinxi | sort | uniq

%colors = (
'c1'            => [irc/console color]
'c2'            => [irc/console color]
'cn'            => [reset normal irc/console color]
'console'       => [0-42]
'default'       => 2 - set in set_basics()
'global'        => [0-12]
'irc-console'   => [0-12]
'irc-gui'       => [0-12]
'irc-virt-term' => [0-12]
'scheme'        => [0-42]
# corresponds to: 94: console 95: virt-term 96: irc-gui 
# 97: irc-virt-term 98: irc-console 99: global 
'selector'      => [94-99]
'virt-term'     => [0-42]
);

----------------------------------------
SEPARATOR: %sep 
----------------------------------------

grep -o "sep{'[^}]*'}" pinxi | sort | uniq

$sep{'s1'}='~';        # dynamic from irc/console: primary category separator, like: Info:
$sep{'s2'}=' ';        # dynamic from irc/console: secondary separator, like: Card-1:
$sep{'s1-irc'}='';     # long form irc
$sep{'s1-console'}=':' # long form console
$sep{'s2-irc'}='';     # long form irc
$sep{'s2-console'}=':' # long form console

----------------------------------------
SIZE: %size
----------------------------------------

grep -o "size{'[^}]*'}" pinxi | sort | uniq

$size{'console'} 
$size{'indent'} = 10;
$size{'indents'} = 2; 
$size{'irc'}
$size{'lines'}
$size{'max-cols'};
$size{'max-cols-basic'}; # used as override if -y1 for -h/--version/--version-short
$size{'max-lines'};
$size{'max-wrap'};
$size{'no-display'}
# these will be set dynamically in set_display_width()
$size{'term-cols'}=80;
$size{'term-lines'}=100;
 
================================================================================
DATA ARRAY VALUES
--------------------------------------------------------------------------------

========================================
DeviceData
----------------------------------------

For -A, -C, -E, -G, -N, -R

%devices = (
'audio' => undef|[],
'bluetooth' => undef|[],
'graphics' => undef|[],
'hwraid' => undef|[],
'main' => [], - initialized to avoid scalar count errors
'network' => undef|[],
'timer' => undef|[], - arm cpu variant
 )

For DeviceData internal use, logging, debugging:
----------------------------------------

0 - type
1 - type_id
2 - bus_id
3  -sub_id
4 - device
5 - vendor_id
6  -chip_id
7 - rev
8 - port
9 - driver
10 - modules
11 - driver_nu [bsd, like: em0 - driver em; nu 0. Used to match IF in -n]
12 - subsystem/vendor
13  -subsystem vendor_id:chip id
14 - soc handle
15 - serial number

========================================
USBData
----------------------------------------

For -A, -E, -G, -J, -N

%usb = (
'audio' => undef|[],
'bluetooth' => undef|[],
'graphics' => undef|[],
'main' => undef|[],
'network' => undef|[],
 )
----------------------------------------

0 - bus id / sort id
1 - device id
2 - path_id
3 - path
4 - class id
5 - subclass id
6 - protocol id
7 - vendor:chip id
8 - usb version
9 - interfaces
10 - ports
11 - vendor 
12 - product
13 - device-name
14 - type string
15 - driver
16 - serial
17 - speed
18 - configuration - not used
19 - power in mA 
20 - product rev number
21 - driver number [bsd, like: em0 - driver em; nu 0. Used to match IF in -n]



